<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Light.Data</name>
    </assembly>
    <members>
        <member name="T:Light.Data.ConfigParamAttribute">
            <summary>
            Extend parameter attribute.
            </summary>
        </member>
        <member name="P:Light.Data.ConfigParamAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Light.Data.ConfigParamAttribute.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Light.Data.ConfigParamAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.ConfigParamAttribute"/> class.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
        </member>
        <member name="T:Light.Data.DataFieldAttribute">
            <summary>
            Data field attribute.
            </summary>
        </member>
        <member name="M:Light.Data.DataFieldAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.DataFieldAttribute"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:Light.Data.DataFieldAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.DataFieldAttribute"/> class.
            </summary>
        </member>
        <member name="P:Light.Data.DataFieldAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Light.Data.DataFieldAttribute.IsNullable">
            <summary>
            Gets or sets a value indicating whether this instance is nullable.
            </summary>
            <value>true</value>
            <c>false</c>
        </member>
        <member name="P:Light.Data.DataFieldAttribute.IsPrimaryKey">
            <summary>
            Gets or sets a value indicating whether this instance is primary key.
            </summary>
            <value>true</value>
            <c>false</c>
        </member>
        <member name="P:Light.Data.DataFieldAttribute.IsIdentity">
            <summary>
            Gets or sets a value indicating whether this instance is identity.
            </summary>
            <value>true</value>
            <c>false</c>
        </member>
        <member name="P:Light.Data.DataFieldAttribute.DbType">
            <summary>
            Gets or sets the type of the DB.
            </summary>
            <value>The type of the DB.</value>
        </member>
        <member name="P:Light.Data.DataFieldAttribute.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Light.Data.DataFieldAttribute.DataOrder">
            <summary>
            Gets or sets the data order.
            </summary>
            <value>The data order.</value>
        </member>
        <member name="P:Light.Data.DataFieldAttribute.FunctionControl">
            <summary>
            Gets or sets the function control.
            </summary>
        </member>
        <member name="T:Light.Data.DataParameterAttribute">
            <summary>
            Store procedure parameter attribute
            </summary>
        </member>
        <member name="M:Light.Data.DataParameterAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Light.Data.DataParameterAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Light.Data.DataParameterAttribute.Name">
            <summary>
            Parameter name
            </summary>
        </member>
        <member name="P:Light.Data.DataParameterAttribute.Direction">
            <summary>
            Data Parameter Direction Mode
            </summary>
        </member>
        <member name="T:Light.Data.DataTableAttribute">
            <summary>
            Data table attribute.
            </summary>
        </member>
        <member name="M:Light.Data.DataTableAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.DataTableAttribute"/> class.
            </summary>
            <param name="tableName">Table name.</param>
        </member>
        <member name="M:Light.Data.DataTableAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.DataTableAttribute"/> class.
            </summary>
        </member>
        <member name="P:Light.Data.DataTableAttribute.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
            <value>The name of the table.</value>
        </member>
        <member name="P:Light.Data.DataTableAttribute.IsEntityTable">
            <summary>
            Gets or sets the extend parameters.
            </summary>
            <value>The extend parameters.</value>
            <summary>
            Gets or sets a value indicating whether this instance is entity table.
            </summary>
            <value>true</value>
            <c>false</c>
        </member>
        <member name="T:Light.Data.RelationFieldAttribute">
            <summary>
            Relation field attribute.
            </summary>
        </member>
        <member name="M:Light.Data.RelationFieldAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.RelationFieldAttribute"/> class.
            </summary>
            <param name="masterKey">Master key.</param>
            <param name="relateKey">Relate key.</param>
        </member>
        <member name="P:Light.Data.RelationFieldAttribute.MasterKey">
            <summary>
            Gets the master key.
            </summary>
            <value>The master key.</value>
        </member>
        <member name="P:Light.Data.RelationFieldAttribute.RelateKey">
            <summary>
            Gets the relate key.
            </summary>
            <value>The relate key.</value>
        </member>
        <member name="T:Light.Data.CommandOutput">
            <summary>
            Command output.
            </summary>
        </member>
        <member name="E:Light.Data.CommandOutput.OnCommandOutput">
            <summary>
            Occurs when on command output.
            </summary>
        </member>
        <member name="P:Light.Data.CommandOutput.OutputFullCommand">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Light.Data.CommandOutput"/> output runnable command.
            </summary>
            <value><c>true</c> if output runnable command; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Light.Data.CommandOutput.UseConsoleOutput">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Light.Data.CommandOutput"/> use console output.
            </summary>
            <value><c>true</c> if use console output; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Light.Data.CommandOutput.Enable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Light.Data.CommandOutput"/> is enable.
            </summary>
            <value><c>true</c> if enable; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Light.Data.CommandOutput.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.CommandOutput"/> class.
            </summary>
        </member>
        <member name="M:Light.Data.CommandOutput.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.CommandOutput"/> class.
            </summary>
            <param name="defaultEnable">If set to <c>true</c> default enable.</param>
        </member>
        <member name="T:Light.Data.CommandOutputEventArgs">
            <summary>
            Command output event arguments.
            </summary>
        </member>
        <member name="P:Light.Data.CommandOutputEventArgs.CommandInfo">
            <summary>
            Gets or sets the command info.
            </summary>
            <value>The command info.</value>
        </member>
        <member name="P:Light.Data.CommandOutputEventArgs.RunnableCommand">
            <summary>
            Gets or sets the runnable command.
            </summary>
            <value>The runnable command.</value>
        </member>
        <member name="T:Light.Data.CommandOutputEventHandle">
            <summary>
            Command output event handle.
            </summary>
        </member>
        <member name="T:Light.Data.CommandOutputInfo">
            <summary>
            Command Output Info
            </summary>
        </member>
        <member name="P:Light.Data.CommandOutputInfo.Action">
            <summary>
            Get command action name
            </summary>
        </member>
        <member name="P:Light.Data.CommandOutputInfo.Command">
            <summary>
            Get sql command text
            </summary>
        </member>
        <member name="P:Light.Data.CommandOutputInfo.Datas">
            <summary>
            Get sql parameters
            </summary>
        </member>
        <member name="P:Light.Data.CommandOutputInfo.CommandType">
            <summary>
            Get sql command type, text or stored procedure
            </summary>
        </member>
        <member name="P:Light.Data.CommandOutputInfo.IsTransaction">
            <summary>
            Get the action is use transaction
            </summary>
        </member>
        <member name="P:Light.Data.CommandOutputInfo.Level">
            <summary>
            Get the action safe level
            </summary>
        </member>
        <member name="P:Light.Data.CommandOutputInfo.StartTime">
            <summary>
            Get the action start time
            </summary>
        </member>
        <member name="P:Light.Data.CommandOutputInfo.EndTime">
            <summary>
            Get the action end time
            </summary>
        </member>
        <member name="P:Light.Data.CommandOutputInfo.Start">
            <summary>
            get data query region offset
            </summary>
        </member>
        <member name="P:Light.Data.CommandOutputInfo.Size">
            <summary>
            get data query region max size
            </summary>
        </member>
        <member name="P:Light.Data.CommandOutputInfo.Success">
            <summary>
            Get the action is success
            </summary>
        </member>
        <member name="P:Light.Data.CommandOutputInfo.ExceptionMessage">
            <summary>
            If the action throw exception, get the exception message
            </summary>
        </member>
        <member name="P:Light.Data.CommandOutputInfo.Result">
            <summary>
            Get the action result
            </summary>
        </member>
        <member name="T:Light.Data.ConfigParamSet">
            <summary>
            Config parameter set.
            </summary>
        </member>
        <member name="M:Light.Data.ConfigParamSet.GetParamValue(System.String)">
            <summary>
            Gets the parameter value.
            </summary>
            <returns>The parameter value.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="M:Light.Data.ConfigParamSet.SetParamValue(System.String,System.String)">
            <summary>
            Sets the parameter value.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
        </member>
        <member name="T:Light.Data.DataContextConfiguration">
            <summary>
            Data context configuration.
            </summary>
        </member>
        <member name="M:Light.Data.DataContextConfiguration.SetConfigFilePath(System.String)">
            <summary>
            Sets the config file path.
            </summary>
            <param name="filePath">File path.</param>
        </member>
        <member name="P:Light.Data.DataContextConfiguration.Global">
            <summary>
            Gets the global configuration.
            </summary>
            <value>The global.</value>
        </member>
        <member name="M:Light.Data.DataContextConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.DataContextConfiguration"/> class.
            </summary>
            <param name="configFilePath">Config file path.</param>
        </member>
        <member name="M:Light.Data.DataContextConfiguration.#ctor(Light.Data.LightDataOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.DataContextConfiguration"/> class.
            </summary>
            <param name="optionList">Option list.</param>
        </member>
        <member name="P:Light.Data.DataContextConfiguration.DefaultOptions">
            <summary>
            Gets the default options.
            </summary>
            <value>The default options.</value>
        </member>
        <member name="P:Light.Data.DataContextConfiguration.UseEntryAssemblyDirectory">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Light.Data.DataContextConfiguration"/> use entry
            assembly directory.
            </summary>
            <value><c>true</c> if use entry assembly directory; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Light.Data.DataContextConfiguration.GetOptions(System.String)">
            <summary>
            Gets the options by name.
            </summary>
            <returns>The options.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="T:Light.Data.DataContextOptions">
            <summary>
            DataContext Options
            </summary>
        </member>
        <member name="T:Light.Data.DataContextOptions`1">
            <summary>
            DataContext Options
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="T:Light.Data.DataContextOptionsBuilder`1">
            <summary>
            Data context options builder.
            </summary>
        </member>
        <member name="M:Light.Data.DataContextOptionsBuilder`1.Build">
            <summary>
            Build this instance.
            </summary>
            <returns>The build.</returns>
        </member>
        <member name="M:Light.Data.DataContextOptionsBuilder`1.BuildOptions(Light.Data.DataContextOptions)">
            <summary>
            Builds the options.
            </summary>
            <param name="options">Options.</param>
        </member>
        <member name="F:Light.Data.DataContextOptionsBuilder`1._commandOutput">
            <summary>
            CommandOutput
            </summary>
        </member>
        <member name="M:Light.Data.DataContextOptionsBuilder`1.SetConfigParam(System.String,System.Object)">
            <summary>
            Sets the config parameter.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Light.Data.DataContextOptionsBuilder`1.SetCommandOutput(Light.Data.ICommandOutput)">
            <summary>
            Sets the command output.
            </summary>
            <param name="output">Output.</param>
        </member>
        <member name="M:Light.Data.DataContextOptionsBuilder`1.SetBatchInsertCount(System.Int32)">
            <summary>
            Sets the batch insert count.
            </summary>
            <param name="count">Count.</param>
        </member>
        <member name="M:Light.Data.DataContextOptionsBuilder`1.SetBatchUpdateCount(System.Int32)">
            <summary>
            Sets the batch update count.
            </summary>
            <param name="count">Count.</param>
        </member>
        <member name="M:Light.Data.DataContextOptionsBuilder`1.SetBatchDeleteCount(System.Int32)">
            <summary>
            Sets the batch delete count.
            </summary>
            <param name="count">Count.</param>
        </member>
        <member name="M:Light.Data.DataContextOptionsBuilder`1.SetTimeout(System.Int32)">
            <summary>
            Sets the timeout.
            </summary>
            <param name="timeout">Timeout.</param>
        </member>
        <member name="M:Light.Data.DataContextOptionsBuilder`1.SetVersion(System.String)">
            <summary>
            Sets the version.
            </summary>
            <param name="version">Version.</param>
        </member>
        <member name="M:Light.Data.DataContextOptionsBuilder`1.SetStrictMode(System.Boolean)">
            <summary>
            Sets the strict mode.
            </summary>
            <param name="strictMode">If set to <c>true</c> strict mode.</param>
        </member>
        <member name="M:Light.Data.DataContextOptionsBuilder`1.SetDataConfig(System.String,System.Func{System.String,Light.Data.ConfigParamSet,Light.Data.DatabaseProvider})">
            <summary>
            Sets the data config.
            </summary>
            <param name="connection">Connection.</param>
            <param name="func">Func.</param>
        </member>
        <member name="T:Light.Data.DataContextOptionsConfigurator`1">
            <summary>
            Data context options configurator.
            </summary>
        </member>
        <member name="P:Light.Data.DataContextOptionsConfigurator`1.ConfigName">
            <summary>
            Gets or sets the name of the config.
            </summary>
            <value>The name of the config.</value>
        </member>
        <member name="M:Light.Data.DataContextOptionsConfigurator`1.SetCommandOutput(Light.Data.ICommandOutput)">
            <summary>
            Sets the command output.
            </summary>
            <param name="output">Output.</param>
        </member>
        <member name="M:Light.Data.DataContextOptionsConfigurator`1.Create(Light.Data.DataContextConfiguration)">
            <summary>
            Create the specified configuration.
            </summary>
            <returns>The create.</returns>
            <param name="configuration">Configuration.</param>
        </member>
        <member name="T:Light.Data.DataFieldMapperConfig">
            <summary>
            Data field config.
            </summary>
        </member>
        <member name="M:Light.Data.DataFieldMapperConfig.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.DataFieldMapperConfig"/> class.
            </summary>
            <param name="fieldName">Field name.</param>
        </member>
        <member name="P:Light.Data.DataFieldMapperConfig.FieldName">
            <summary>
            Gets the name of the field.
            </summary>
            <value>The name of the field.</value>
        </member>
        <member name="P:Light.Data.DataFieldMapperConfig.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Light.Data.DataFieldMapperConfig.IsNullable">
            <summary>
            Gets or sets a value indicating whether this instance is nullable.
            </summary>
            <value>true</value>
            <c>false</c>
        </member>
        <member name="P:Light.Data.DataFieldMapperConfig.IsPrimaryKey">
            <summary>
            Gets or sets a value indicating whether this instance is primary key.
            </summary>
            <value>true</value>
            <c>false</c>
        </member>
        <member name="P:Light.Data.DataFieldMapperConfig.IsIdentity">
            <summary>
            Gets or sets a value indicating whether this instance is identity.
            </summary>
            <value>true</value>
            <c>false</c>
        </member>
        <member name="P:Light.Data.DataFieldMapperConfig.DbType">
            <summary>
            Gets or sets the type of the DB.
            </summary>
            <value>The type of the DB.</value>
        </member>
        <member name="P:Light.Data.DataFieldMapperConfig.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Light.Data.DataFieldMapperConfig.DataOrder">
            <summary>
            Gets or sets the data order.
            </summary>
            <value>The data order.</value>
        </member>
        <member name="T:Light.Data.DataMapperConfiguration">
            <summary>
            Data Mapper Configuration
            </summary>
        </member>
        <member name="P:Light.Data.DataMapperConfiguration.UseEntryAssemblyDirectory">
            <summary>
            Sets whether to use entry assembly directory
            </summary>
        </member>
        <member name="M:Light.Data.DataMapperConfiguration.AddConfigFilePath(System.String)">
            <summary>
            Add config file path
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="T:Light.Data.DataTableMapperConfig">
            <summary>
            Data table config.
            </summary>
        </member>
        <member name="P:Light.Data.DataTableMapperConfig.ConfigParams">
            <summary>
            Gets or sets the extend parameters.
            </summary>
            <value>The extend parameters.</value>
        </member>
        <member name="M:Light.Data.DataTableMapperConfig.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.DataTableMapperConfig"/> class.
            </summary>
            <param name="dataType">Data type.</param>
        </member>
        <member name="P:Light.Data.DataTableMapperConfig.DataType">
            <summary>
            Gets the type of the data.
            </summary>
            <value>The type of the data.</value>
        </member>
        <member name="P:Light.Data.DataTableMapperConfig.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
            <value>The name of the table.</value>
        </member>
        <member name="P:Light.Data.DataTableMapperConfig.IsEntityTable">
            <summary>
            Gets or sets a value indicating whether this instance is entity table.
            </summary>
            <value>true</value>
            <c>false</c>
        </member>
        <member name="T:Light.Data.LightDataOptions">
            <summary>
            Light data options.
            </summary>
        </member>
        <member name="P:Light.Data.LightDataOptions.Connections">
            <summary>
            Gets or sets the connections.
            </summary>
            <value>The connections.</value>
        </member>
        <member name="T:Light.Data.ConnectionSection">
            <summary>
            Connection section.
            </summary>
        </member>
        <member name="P:Light.Data.ConnectionSection.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Light.Data.ConnectionSection.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Light.Data.ConnectionSection.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="P:Light.Data.ConnectionSection.ConfigParams">
            <summary>
            Gets or sets the config parameters.
            </summary>
            <value>The config parameters.</value>
        </member>
        <member name="T:Light.Data.RelationFieldMapConfig">
            <summary>
            Relation field config.
            </summary>
        </member>
        <member name="M:Light.Data.RelationFieldMapConfig.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.RelationFieldMapConfig"/> class.
            </summary>
            <param name="fieldName">Field name.</param>
        </member>
        <member name="M:Light.Data.RelationFieldMapConfig.AddRelationKeys(System.String,System.String)">
            <summary>
            Adds the relation keys.
            </summary>
            <param name="masterKey">Master key.</param>
            <param name="relateKey">Relate key.</param>
        </member>
        <member name="P:Light.Data.RelationFieldMapConfig.FieldName">
            <summary>
            Gets the name of the field.
            </summary>
            <value>The name of the field.</value>
        </member>
        <member name="M:Light.Data.RelationFieldMapConfig.GetRelationKeys">
            <summary>
            Gets the relation keys.
            </summary>
            <returns>The relation keys.</returns>
        </member>
        <member name="P:Light.Data.RelationFieldMapConfig.RelationKeyCount">
            <summary>
             Gets the relation keys count
            </summary>
            <value>The relation key count.</value>
        </member>
        <member name="T:Light.Data.RelationKey">
            <summary>
            Relation key.
            </summary>
        </member>
        <member name="M:Light.Data.RelationKey.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.RelationKey"/> class.
            </summary>
            <param name="masterKey">Master key.</param>
            <param name="relateKey">Relate key.</param>
        </member>
        <member name="P:Light.Data.RelationKey.MasterKey">
            <summary>
            Gets the master key.
            </summary>
            <value>The master key.</value>
        </member>
        <member name="P:Light.Data.RelationKey.RelateKey">
            <summary>
            Gets the relate key.
            </summary>
            <value>The relate key.</value>
        </member>
        <member name="M:Light.Data.RelationKey.IsReverseMatch(Light.Data.RelationKey)">
            <summary>
            Determines whether this instance is reverse match the specified target.
            </summary>
            <returns><c>true</c> if this instance is reverse match the specified target; otherwise, <c>false</c>.</returns>
            <param name="target">Target.</param>
        </member>
        <member name="M:Light.Data.RelationKey.IsMatch(Light.Data.RelationKey)">
            <summary>
            Determines whether this instance is match the specified target.
            </summary>
            <returns><c>true</c> if this instance is match the specified target; otherwise, <c>false</c>.</returns>
            <param name="target">Target.</param>
        </member>
        <member name="T:Light.Data.ConnectionSetting">
            <summary>
            The Connection Setting
            </summary>
        </member>
        <member name="P:Light.Data.ConnectionSetting.ConnectionString">
            <summary>
            Connection String
            </summary>
        </member>
        <member name="P:Light.Data.ConnectionSetting.ConfigParam">
            <summary>
            Config Param
            </summary>
        </member>
        <member name="P:Light.Data.ConnectionSetting.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Light.Data.ConnectionSetting.ProviderName">
            <summary>
            Provider Name
            </summary>
        </member>
        <member name="M:Light.Data.CreateSqlState.AddDataParameter(Light.Data.CommandFactory,System.Object,System.String,Light.Data.DataParameterMode,System.Type)">
            <summary>
            Add the data parameter.
            </summary>
            <returns>The data parameter.</returns>
            <param name="factory">Factory.</param>
            <param name="paramValue">Parameter value.</param>
            <param name="dbType">Db type.</param>
            <param name="direction">Direction.</param>
            <param name="dataType">Data type.</param>
        </member>
        <member name="M:Light.Data.CreateSqlState.AddDataParameter(Light.Data.CommandFactory,System.Object,System.String,Light.Data.DataParameterMode)">
            <summary>
            Add the data parameter.
            </summary>
            <returns>The data parameter.</returns>
            <param name="factory">Factory.</param>
            <param name="paramValue">Parameter value.</param>
            <param name="dbType">Db type.</param>
            <param name="direction">Direction.</param>
        </member>
        <member name="M:Light.Data.CreateSqlState.AddDataParameter(Light.Data.CommandFactory,System.Object)">
            <summary>
            Add the data parameter.
            </summary>
            <returns>The data parameter.</returns>
            <param name="factory">Factory.</param>
            <param name="paramValue">Parameter value.</param>
        </member>
        <member name="M:Light.Data.CreateSqlState.AddDataParameter(Light.Data.CommandFactory,System.Object,Light.Data.DataParameterMode)">
            <summary>
            Add the data parameter.
            </summary>
            <returns>The data parameter.</returns>
            <param name="factory">Factory.</param>
            <param name="paramValue">Parameter value.</param>
            <param name="direction">Direction.</param>
        </member>
        <member name="M:Light.Data.CreateSqlState.AddDataParameter(Light.Data.CommandFactory,System.Object,System.String)">
            <summary>
            Add the data parameter.
            </summary>
            <returns>The data parameter.</returns>
            <param name="factory">Factory.</param>
            <param name="paramValue">Parameter value.</param>
            <param name="dbType">Db type.</param>
        </member>
        <member name="M:Light.Data.DatabaseProvider.CreateConnection">
            <summary>
            Creates the connection.
            </summary>
            <returns>The connection.</returns>
        </member>
        <member name="M:Light.Data.DatabaseProvider.CreateConnection(System.String)">
            <summary>
            Creates the connection.
            </summary>
            <returns>The connection.</returns>
            <param name="connectionString">Connection string.</param>
        </member>
        <member name="M:Light.Data.DatabaseProvider.CreateCommand(System.String)">
            <summary>
            Creates the command.
            </summary>
            <returns>The command.</returns>
            <param name="sql">Sql.</param>
        </member>
        <member name="M:Light.Data.DatabaseProvider.CreateCommand">
            <summary>
            Creates the command.
            </summary>
            <returns>The command.</returns>
        </member>
        <member name="M:Light.Data.DatabaseProvider.CreateDataAdapter(System.Data.Common.DbCommand)">
            <summary>
            Creates the data adapter.
            </summary>
            <returns>return data adapter</returns>
        </member>
        <member name="M:Light.Data.DatabaseProvider.CreateParameter(System.String,System.Object,System.String,System.Data.ParameterDirection,System.Type,System.Data.CommandType)">
            <summary>
            Creates the parameter.
            </summary>
            <returns>The parameter.</returns>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <param name="dbType">Db type.</param>
            <param name="direction">Direction.</param>
            <param name="dataType">Data type.</param>
            <param name="commandType">Command type.</param>
        </member>
        <member name="P:Light.Data.DatabaseProvider.Factory">
            <summary>
            Gets the factory.
            </summary>
            <value>The factory.</value>
        </member>
        <member name="T:Light.Data.DataContext">
            <summary>
            DataContext.
            </summary>
        </member>
        <member name="M:Light.Data.DataContext.GetTableName``1">
            <summary>
            Get the name of the mapping table.
            </summary>
            <returns>The table name.</returns>
            <typeparam name="T">Specified object type.</typeparam>
        </member>
        <member name="P:Light.Data.DataContext.ParameterPrefix">
            <summary>
            Sql Parameter Prefix
            </summary>
        </member>
        <member name="M:Light.Data.DataContext.SetAliasTableName``1(System.String)">
            <summary>
            Set the mapping table alias name for the specified object type
            </summary>
            <typeparam name="T">Specified object type.</typeparam>
            <param name="name">Alias name.</param>
        </member>
        <member name="M:Light.Data.DataContext.ResetAliasTableName``1">
            <summary>
            Clear the mapping table alias name for the specified object type
            </summary>
            <typeparam name="T">Specified object type.</typeparam>
            <returns>Clear success or not</returns>
        </member>
        <member name="M:Light.Data.DataContext.ClearAliasTableName">
            <summary>
            Clear all the mapping table alias name
            </summary>
        </member>
        <member name="P:Light.Data.DataContext.Options">
            <summary>
            DataContext Options
            </summary>
        </member>
        <member name="F:Light.Data.DataContext._output">
            <summary>
            The command output interface.
            </summary>
        </member>
        <member name="M:Light.Data.DataContext.SetCommandOutput(Light.Data.ICommandOutput)">
            <summary>
            Sets the command output.
            </summary>
            <param name="output">Output.</param>
        </member>
        <member name="M:Light.Data.DataContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.DataContext"/> class.
            </summary>
        </member>
        <member name="M:Light.Data.DataContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.DataContext"/> class.
            </summary>
            <param name="configName">Config name.</param>
        </member>
        <member name="M:Light.Data.DataContext.#ctor(Light.Data.IConnectionSetting)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.DataContext"/> class.
            </summary>
            <param name="setting">Connection setting.</param>
        </member>
        <member name="M:Light.Data.DataContext.#ctor(Light.Data.DataContextOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.DataContext"/> class.
            </summary>
            <param name="options">Context options.</param>
        </member>
        <member name="M:Light.Data.DataContext.CreateNew``1">
            <summary>
            Create a new result.
            </summary>
            <returns>The new result.</returns>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.InsertOrUpdate``1(``0)">
            <summary>
            Insert or update the specified data.
            </summary>
            <returns>result.</returns>
            <param name="data">Data.</param>
        </member>
        <member name="M:Light.Data.DataContext.InsertOrUpdate``1(``0,System.Boolean)">
            <summary>
            Insert or update the specified data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">Data</param>
            <param name="refresh">Whether to refresh null data with default value fields.</param>
            <returns>result.</returns>
        </member>
        <member name="M:Light.Data.DataContext.InsertOrUpdate``1(``0,Light.Data.SafeLevel)">
            <summary>
            Insert or update the specified data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">Data</param>
            <param name="level">Safe level</param>
            <returns>result.</returns>
        </member>
        <member name="M:Light.Data.DataContext.InsertOrUpdate``1(``0,Light.Data.SafeLevel,System.Boolean)">
            <summary>
            Insert or update the specified data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">Data</param>
            <param name="level">Safe level</param>
            <param name="refresh">Whether to refresh null data with default value fields.</param>
            <returns>result.</returns>
        </member>
        <member name="M:Light.Data.DataContext.InsertOrUpdateAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Insert or update the specified data.
            </summary>
            <returns>result.</returns>
            <param name="data">Data.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataContext.InsertOrUpdateAsync``1(``0,Light.Data.SafeLevel,System.Threading.CancellationToken)">
            <summary>
            Insert or update the specified data.
            </summary>
            <returns>result.</returns>
            <param name="data">Data.</param>
            <param name="level">Safe level</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataContext.InsertOrUpdateAsync``1(``0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Insert or update the specified data.
            </summary>
            <returns>result.</returns>
            <param name="data">Data.</param>
            <param name="refresh">Whether to refresh null data with default value fields.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataContext.InsertOrUpdateAsync``1(``0,Light.Data.SafeLevel,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Insert or update the specified data.
            </summary>
            <returns>result.</returns>
            <param name="data">Data.</param>
            <param name="level">Safe level</param>
            <param name="refresh">Whether to refresh null data with default value fields.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataContext.Insert``1(``0)">
            <summary>
            Insert the specified data.
            </summary>
            <returns>result.</returns>
            <param name="data">Data.</param>
        </member>
        <member name="M:Light.Data.DataContext.Insert``1(``0,System.Boolean)">
            <summary>
            Insert the specified data.
            </summary>
            <returns>result.</returns>
            <param name="data">Data.</param>
            <param name="refresh">Whether to refresh data field</param>
        </member>
        <member name="M:Light.Data.DataContext.InsertAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Insert the specified data.
            </summary>
            <returns>result.</returns>
            <param name="data">Data.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataContext.InsertAsync``1(``0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Insert the specified data.
            </summary>
            <returns>result.</returns>
            <param name="data">Data.</param>
            <param name="refresh">Whether to refresh null data with default value fields.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataContext.Update``1(``0)">
            <summary>
            Update the specified data.
            </summary>
            <returns>result.</returns>
            <param name="data">Data.</param>
        </member>
        <member name="M:Light.Data.DataContext.Update``1(``0,System.Boolean)">
            <summary>
            Update the specified data.
            </summary>
            <returns>result.</returns>
            <param name="data">Data.</param>
            <param name="refresh">Whether to refresh data field</param>
        </member>
        <member name="M:Light.Data.DataContext.UpdateAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Update the specified data.
            </summary>
            <returns>result.</returns>
            <param name="data">Data.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataContext.UpdateAsync``1(``0,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Update the specified data.
            </summary>
            <returns>result.</returns>
            <param name="data">Data.</param>
            <param name="refresh">Whether to refresh data field</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataContext.Delete``1(``0)">
            <summary>
            Delete the specified data.
            </summary>
            <returns>result.</returns>
            <param name="data">Data.</param>
        </member>
        <member name="M:Light.Data.DataContext.DeleteAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Delete the specified data.
            </summary>
            <returns>result.</returns>
            <param name="data">Data.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataContext.BatchInsert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Batch insert datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Data collection.</param>
            <typeparam name="T">Insert object type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.BatchInsert``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean)">
            <summary>
            Batch insert datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Data collection.</param>
            <param name="refresh">Whether to refresh null data with default value fields..</param>
            <param name="updateIdentity">Whether to update the identity field.</param>
            <typeparam name="T">Insert object type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.BatchInsert``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Batch insert datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Data collection.</param>
            <param name="index">Index.</param>
            <param name="size">Size.</param>
            <typeparam name="T">Insert object type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.BatchInsert``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Batch insert datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Data collection.</param>
            <param name="index">Index.</param>
            <param name="size">Size.</param>
            <param name="refresh">Whether to refresh null data with default value fields..</param>
            <param name="updateIdentity">Whether to update the identity field.</param>
            <typeparam name="T">Insert object type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.BatchInsertAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Batch insert datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Data collection.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Insert object type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.BatchInsertAsync``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Batch insert datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Data collection.</param>
            <param name="refresh">Whether to refresh null data with default value fields..</param>
            <param name="updateIdentity">Whether to update the identity field.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Insert object type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.BatchInsertAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Batch insert datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Data collection.</param>
            <param name="index">Index.</param>
            <param name="size">Size.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Insert object type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.BatchInsertAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Batch insert datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Data collection.</param>
            <param name="index">Index.</param>
            <param name="size">Size.</param>
            <param name="refresh">Whether to refresh null data with default value fields..</param>
            <param name="updateIdentity">Whether to update the identity field.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Insert object type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.BatchUpdate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Batch update datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Datas.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.BatchUpdate``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Batch update datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Datas.</param>
            <param name="refresh">Whether to refresh null data with default value fields.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.BatchUpdate``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Batch update datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Datas.</param>
            <param name="index">Index.</param>
            <param name="count">Count.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.BatchUpdate``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Batch update datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Datas.</param>
            <param name="index">Index.</param>
            <param name="count">Count.</param>
            <param name="refresh">Whether to refresh null data with default value fields.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.BatchUpdateAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Batch update datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Datas.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.BatchUpdateAsync``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Batch update datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Datas.</param>
            <param name="refresh">Whether to refresh null data with default value fields.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.BatchUpdateAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Batch update datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Datas.</param>
            <param name="index">Index.</param>
            <param name="count">Count.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.BatchUpdateAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Batch update datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Datas.</param>
            <param name="index">Index.</param>
            <param name="count">Count.</param>
            <param name="refresh">Whether to refresh null data with default value fields.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.BatchDelete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Batch delete data.
            </summary>
            <returns>The delete rows.</returns>
            <param name="datas">Datas.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.BatchDelete``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Batch delete datas.
            </summary>
            <returns>The delete rows.</returns>
            <param name="datas">Datas.</param>
            <param name="index">Index.</param>
            <param name="count">Count.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.BatchDeleteAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Batch delete data.
            </summary>
            <returns>The delete rows.</returns>
            <param name="datas">Datas.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.BatchDeleteAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Batch delete datas.
            </summary>
            <returns>The delete rows.</returns>
            <param name="datas">Datas.</param>
            <param name="index">Index.</param>
            <param name="count">Count.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.SelectByKey``1(System.Object[])">
            <summary>
            Select the single object by keys.
            </summary>
            <returns>result.</returns>
            <param name="primaryKeys">Primary keys.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.SelectByKeyAsync``1(System.Object[],System.Threading.CancellationToken)">
            <summary>
            Select the single object by keys.
            </summary>
            <returns>result.</returns>
            <param name="primaryKeys">Primary keys.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.SelectByKeyAsync``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            Select the single object by keys.
            </summary>
            <returns>result.</returns>
            <param name="primaryKey">Primary key.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.SelectByKeyAsync``1(System.Object,System.Object,System.Threading.CancellationToken)">
            <summary>
            Select the single object by keys.
            </summary>
            <returns>result.</returns>
            <param name="primaryKey1">Primary key 1.</param>
            <param name="primaryKey2">Primary key 2.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.SelectByKeyAsync``1(System.Object,System.Object,System.Object,System.Threading.CancellationToken)">
            <summary>
            Select the single object by keys.
            </summary>
            <returns>result.</returns>
            <param name="primaryKey1">Primary key 1.</param>
            <param name="primaryKey2">Primary key 2.</param>
            <param name="primaryKey3">Primary key 3.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.Exists``1(System.Object[])">
            <summary>
            Check exist the object by keys.
            </summary>
            <returns>exists or not.</returns>
            <param name="primaryKeys">Primary keys.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.ExistsAsync``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            Check exist the object by keys.
            </summary>
            <returns>exists or not.</returns>
            <param name="primaryKey">Primary key.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.ExistsAsync``1(System.Object,System.Object,System.Threading.CancellationToken)">
            <summary>
            Check exist the object by keys.
            </summary>
            <returns>exists or not.</returns>
            <param name="primaryKey1">Primary key 1.</param>
            <param name="primaryKey2">Primary key 2.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.ExistsAsync``1(System.Object,System.Object,System.Object,System.Threading.CancellationToken)">
            <summary>
            Check exist the object by keys.
            </summary>
            <returns>exists or not.</returns>
            <param name="primaryKey1">Primary key 1.</param>
            <param name="primaryKey2">Primary key 2.</param>
            <param name="primaryKey3">Primary key 3.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.ExistsAsync``1(System.Object[],System.Threading.CancellationToken)">
            <summary>
            Check exist the object by keys.
            </summary>
            <returns>exists or not.</returns>
            <param name="primaryKeys">Primary keys.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.DeleteByKey``1(System.Object[])">
            <summary>
            Delete the object by keys.
            </summary>
            <returns>result.</returns>
            <param name="primaryKeys">Primary key.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.DeleteByKeyAsync``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            Delete the object by keys.
            </summary>
            <returns>result.</returns>
            <param name="primaryKey">Primary key.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.DeleteByKeyAsync``1(System.Object,System.Object,System.Threading.CancellationToken)">
            <summary>
            Delete the object by keys.
            </summary>
            <returns>result.</returns>
            <param name="primaryKey1">Primary key 1.</param>
            <param name="primaryKey2">Primary key 2.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.DeleteByKeyAsync``1(System.Object,System.Object,System.Object,System.Threading.CancellationToken)">
            <summary>
            Delete the object by keys.
            </summary>
            <returns>result.</returns>
            <param name="primaryKey1">Primary key 1.</param>
            <param name="primaryKey2">Primary key 2.</param>
            <param name="primaryKey3">Primary key 3.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.DeleteByKeyAsync``1(System.Object[],System.Threading.CancellationToken)">
            <summary>
            Delete the object by keys.
            </summary>
            <returns>result.</returns>
            <param name="primaryKeys">Primary keys.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.SelectById``1(System.Object)">
            <summary>
            Select the single object by id.
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <param name="id">id</param>
            <returns>result.</returns>
        </member>
        <member name="M:Light.Data.DataContext.SelectByIdAsync``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            Select the single object by id.
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <param name="id">id</param>
            <param name="cancellationToken">CancellationToken.</param>
            <returns>result.</returns>
        </member>
        <member name="M:Light.Data.DataContext.Query``1">
            <summary>
            Create query expression.
            </summary>
            <returns>The queryable.</returns>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.TruncateTable``1">
            <summary>
            Truncates the table.
            </summary>
            <returns>The table.</returns>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.TruncateTableAsync``1(System.Threading.CancellationToken)">
            <summary>
            Truncates the table.
            </summary>
            <returns>The table.</returns>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataContext.CreateSqlStringExecutor(System.String,Light.Data.DataParameter[],Light.Data.SafeLevel)">
            <summary>
            Creates the sql string executor.
            </summary>
            <returns>The sql string executor.</returns>
            <param name="sqlString">Sql string.</param>
            <param name="param">Parameter.</param>
            <param name="level">Level.</param>
        </member>
        <member name="M:Light.Data.DataContext.CreateSqlStringExecutor(System.String,Light.Data.DataParameter[])">
            <summary>
            Creates the sql string executor.
            </summary>
            <returns>The sql string executor.</returns>
            <param name="sqlString">Sql string.</param>
            <param name="param">Parameter.</param>
        </member>
        <member name="M:Light.Data.DataContext.CreateSqlStringExecutor(System.String,System.Object,Light.Data.SafeLevel)">
            <summary>
            Creates the sql string executor.
            </summary>
            <returns>The sql string executor.</returns>
            <param name="sqlString">Sql string.</param>
            <param name="value">Value.</param>
            <param name="level">Level.</param>
        </member>
        <member name="M:Light.Data.DataContext.CreateSqlStringExecutor(System.String,System.Object)">
            <summary>
            Creates the sql string executor.
            </summary>
            <returns>The sql string executor.</returns>
            <param name="sqlString">Sql string.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Light.Data.DataContext.CreateSqlStringExecutor(System.String,Light.Data.SafeLevel)">
            <summary>
            Creates the sql string executor.
            </summary>
            <returns>The sql string executor.</returns>
            <param name="sqlString">Sql string.</param>
            <param name="level">Level.</param>
        </member>
        <member name="M:Light.Data.DataContext.CreateSqlStringExecutor(System.String)">
            <summary>
            Creates the sql string executor.
            </summary>
            <returns>The sql string executor.</returns>
            <param name="sqlString">Sql string.</param>
        </member>
        <member name="M:Light.Data.DataContext.CreateStoreProcedureExecutor(System.String,Light.Data.DataParameter[],Light.Data.SafeLevel)">
            <summary>
            Creates the store procedure executor.
            </summary>
            <returns>The store procedure executor.</returns>
            <param name="storeProcedure">Store procedure.</param>
            <param name="param">Parameter.</param>
            <param name="level">Level.</param>
        </member>
        <member name="M:Light.Data.DataContext.CreateStoreProcedureExecutor(System.String,Light.Data.DataParameter[])">
            <summary>
            Creates the store procedure executor.
            </summary>
            <returns>The store procedure executor.</returns>
            <param name="storeProcedure">Store procedure.</param>
            <param name="param">Parameter.</param>
        </member>
        <member name="M:Light.Data.DataContext.CreateStoreProcedureExecutor(System.String,System.Object,Light.Data.SafeLevel)">
            <summary>
            Creates the store procedure executor.
            </summary>
            <returns>The store procedure executor.</returns>
            <param name="storeProcedure">Store procedure.</param>
            <param name="value">Value.</param>
            <param name="level">Level.</param>
        </member>
        <member name="M:Light.Data.DataContext.CreateStoreProcedureExecutor(System.String,System.Object)">
            <summary>
            Creates the store procedure executor.
            </summary>
            <returns>The store procedure executor.</returns>
            <param name="storeProcedure">Store procedure.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Light.Data.DataContext.CreateStoreProcedureExecutor(System.String,Light.Data.SafeLevel)">
            <summary>
            Creates the store procedure executor.
            </summary>
            <returns>The store procedure executor.</returns>
            <param name="storeProcedure">Store procedure.</param>
            <param name="level">Level.</param>
        </member>
        <member name="M:Light.Data.DataContext.CreateStoreProcedureExecutor(System.String)">
            <summary>
            Creates the store procedure executor.
            </summary>
            <returns>The store procedure executor.</returns>
            <param name="storeProcedure">Store procedure.</param>
        </member>
        <member name="P:Light.Data.DataContext.IsDisposed">
            <summary>
            Check the context is disposed
            </summary>
        </member>
        <member name="M:Light.Data.DataContext.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Light.Data.DataContext.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Light.Data.DataContext.Dispose">
            <summary>
            Dispose the context
            </summary>
        </member>
        <member name="P:Light.Data.DataContext.IsTransactionMode">
            <summary>
            Check the context is in the transaction mode.
            </summary>
        </member>
        <member name="M:Light.Data.DataContext.BeginTrans">
            <summary>
            Begin the transaction and set default level and not auto close.
            </summary>
        </member>
        <member name="M:Light.Data.DataContext.BeginTrans(Light.Data.SafeLevel)">
            <summary>
            Begin the transaction and set not auto close.
            </summary>
            <param name="level">Level.</param>
        </member>
        <member name="M:Light.Data.DataContext.BeginTrans(System.Boolean)">
            <summary>
            Begin the transaction and set default level.
            </summary>
            <param name="autoRelease">Auto release.</param>
        </member>
        <member name="M:Light.Data.DataContext.BeginTrans(Light.Data.SafeLevel,System.Boolean)">
            <summary>
            Begin the transaction.
            </summary>
            <param name="level">Level.</param>
            <param name="autoRelease">Auto release.</param>
        </member>
        <member name="M:Light.Data.DataContext.CommitTrans">
            <summary>
            Commit the transaction.
            </summary>
        </member>
        <member name="M:Light.Data.DataContext.RollbackTrans">
            <summary>
            Rollback the transaction.
            </summary>
        </member>
        <member name="M:Light.Data.DataContext.ReleaseTrans">
            <summary>
            Release the transaction
            </summary>
        </member>
        <member name="M:Light.Data.DataContext.QuerySqlList``1(System.String)">
            <summary>
            Query data list with direct sql string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlString">Sql string.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QuerySqlList``1(System.String,System.Object)">
            <summary>
            Query data list with direct sql string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlString">Sql string.</param>
            <param name="value">Paratemers object</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QuerySqlList``1(System.String,System.Int32,System.Int32)">
            <summary>
            Query data list with direct sql string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlString">Sql string.</param>
            <param name="start">Page start</param>
            <param name="size">Page size</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QuerySqlList``1(System.String,System.Object,System.Int32,System.Int32)">
            <summary>
            Query data list with direct sql string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlString">Sql string.</param>
            <param name="value">Parameters object</param>
            <param name="start">Page start</param>
            <param name="size">Page size</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QuerySqlListAsync``1(System.String)">
            <summary>
            Query data list with direct sql string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlString">Sql string.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QuerySqlListAsync``1(System.String,System.Object)">
            <summary>
            Query data list with direct sql string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlString">Sql string.</param>
            <param name="value">Paratemers object</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QuerySqlListAsync``1(System.String,System.Int32,System.Int32)">
            <summary>
            Query data list with direct sql string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlString">Sql string.</param>
            <param name="start">Page start</param>
            <param name="size">Page size</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QuerySqlListAsync``1(System.String,System.Object,System.Int32,System.Int32)">
            <summary>
            Query data list with direct sql string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlString">Sql string.</param>
            <param name="value">Parameters object</param>
            <param name="start">Page start</param>
            <param name="size">Page size</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QuerySqlFirst``1(System.String)">
            <summary>
            Query data first item with direct sql string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlString">Sql string.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QuerySqlFirst``1(System.String,System.Object)">
            <summary>
            Query data first item with direct sql string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlString">Sql string.</param>
            <param name="value">Paratemers object</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QuerySqlFirstAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Query data first item with direct sql string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlString">Sql string.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QuerySqlFirstAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Query data first item with direct sql string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sqlString">Sql string.</param>
            <param name="value">Paratemers object</param>
            <param name="cancellationToken">CancellationToken.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.ExecuteNonQuerySqlString(System.String)">
            <summary>
            Execute NonQuery with direct sql string
            </summary>
            <param name="sqlString">Sql string.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.ExecuteNonQuerySqlString(System.String,System.Object)">
            <summary>
            Execute NonQuery with direct sql string
            </summary>
            <param name="sqlString">Sql string.</param>
            <param name="value">Paratemers object</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.ExecuteNonQuerySqlStringAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Execute NonQuery with direct sql string
            </summary>
            <param name="sqlString">Sql string.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.ExecuteNonQuerySqlStringAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Execute NonQuery with direct sql string
            </summary>
            <param name="sqlString">Sql string.</param>
            <param name="value">Paratemers object</param>
            <param name="cancellationToken">CancellationToken.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.ExecuteScalarSqlString(System.String)">
            <summary>
            Execute Scalar with direct sql string
            </summary>
            <param name="sqlString">Sql string.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.ExecuteScalarSqlString(System.String,System.Object)">
            <summary>
            Execute Scalar with direct sql string
            </summary>
            <param name="sqlString">Sql string.</param>
            <param name="value">Paratemers object</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.ExecuteScalarSqlStringAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Execute Scalar with direct sql string
            </summary>
            <param name="sqlString">Sql string.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.ExecuteScalarSqlStringAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Execute Scalar with direct sql string
            </summary>
            <param name="sqlString">Sql string.</param>
            <param name="value">Paratemers object</param>
            <param name="cancellationToken">CancellationToken.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QueryStoreProcedureList``1(System.String)">
            <summary>
            Query data list with store procedure
            </summary>
            <typeparam name="T"></typeparam>
            <param name="storeProcedure">Store Procedure name.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QueryStoreProcedureList``1(System.String,System.Object)">
            <summary>
            Query data list with store procedure
            </summary>
            <typeparam name="T"></typeparam>
            <param name="storeProcedure">Store Procedure name.</param>
            <param name="value">Paratemers object</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QueryStoreProcedureList``1(System.String,System.Int32,System.Int32)">
            <summary>
            Query data list with store procedure
            </summary>
            <typeparam name="T"></typeparam>
            <param name="storeProcedure">Store Procedure name.</param>
            <param name="start">Page start</param>
            <param name="size">Page size</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QueryStoreProcedureList``1(System.String,System.Object,System.Int32,System.Int32)">
            <summary>
            Query data list with store procedure
            </summary>
            <typeparam name="T"></typeparam>
            <param name="storeProcedure">Store Procedure name.</param>
            <param name="value">Parameters object</param>
            <param name="start">Page start</param>
            <param name="size">Page size</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QueryStoreProcedureListAsync``1(System.String)">
            <summary>
            Query data list with store procedure
            </summary>
            <typeparam name="T"></typeparam>
            <param name="storeProcedure">Store Procedure name.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QueryStoreProcedureListAsync``1(System.String,System.Object)">
            <summary>
            Query data list with store procedure
            </summary>
            <typeparam name="T"></typeparam>
            <param name="storeProcedure">Store Procedure name.</param>
            <param name="value">Paratemers object</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QueryStoreProcedureListAsync``1(System.String,System.Int32,System.Int32)">
            <summary>
            Query data list with store procedure
            </summary>
            <typeparam name="T"></typeparam>
            <param name="storeProcedure">Store Procedure name.</param>
            <param name="start">Page start</param>
            <param name="size">Page size</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QueryStoreProcedureListAsync``1(System.String,System.Object,System.Int32,System.Int32)">
            <summary>
            Query data list with store procedure
            </summary>
            <typeparam name="T"></typeparam>
            <param name="storeProcedure">Store Procedure name.</param>
            <param name="value">Parameters object</param>
            <param name="start">Page start</param>
            <param name="size">Page size</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QueryStoreProcedureFirst``1(System.String)">
            <summary>
            Query data first item with store procedure
            </summary>
            <typeparam name="T"></typeparam>
            <param name="storeProcedure">Store Procedure name.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QueryStoreProcedureFirst``1(System.String,System.Object)">
            <summary>
            Query data first item with store procedure
            </summary>
            <typeparam name="T"></typeparam>
            <param name="storeProcedure">Store Procedure name.</param>
            <param name="value">Paratemers object</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QueryStoreProcedureFirstAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Query data first item with store procedure
            </summary>
            <typeparam name="T"></typeparam>
            <param name="storeProcedure">Store Procedure name.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.QueryStoreProcedureFirstAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Query data first item with store procedure
            </summary>
            <typeparam name="T"></typeparam>
            <param name="storeProcedure">Store Procedure name.</param>
            <param name="value">Paratemers object</param>
            <param name="cancellationToken">CancellationToken.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.ExecuteNonQueryStoreProcedure(System.String)">
            <summary>
            Execute NonQuery with store procedure
            </summary>
            <param name="storeProcedure">Store Procedure name.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.ExecuteNonQueryStoreProcedure(System.String,System.Object)">
            <summary>
            Execute NonQuery with store procedure
            </summary>
            <param name="storeProcedure">Store Procedure name.</param>
            <param name="value">Paratemers object</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.ExecuteNonQueryStoreProcedureAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Execute NonQuery with store procedure
            </summary>
            <param name="storeProcedure">Store Procedure name.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.ExecuteNonQueryStoreProcedureAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Execute NonQuery with store procedure
            </summary>
            <param name="storeProcedure">Store Procedure name.</param>
            <param name="value">Paratemers object</param>
            <param name="cancellationToken">CancellationToken.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.ExecuteScalarStoreProcedure(System.String)">
            <summary>
            Execute Scalar with store procedure
            </summary>
            <param name="storeProcedure">Store Procedure name.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.ExecuteScalarStoreProcedure(System.String,System.Object)">
            <summary>
            Execute Scalar with store procedure
            </summary>
            <param name="storeProcedure">Store Procedure name.</param>
            <param name="value">Paratemers object</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.ExecuteScalarStoreProcedureAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Execute Scalar with store procedure
            </summary>
            <param name="storeProcedure">Store Procedure name.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataContext.ExecuteScalarStoreProcedureAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Execute Scalar with store procedure
            </summary>
            <param name="storeProcedure">Store Procedure name.</param>
            <param name="value">Paratemers object</param>
            <param name="cancellationToken">CancellationToken.</param>
            <returns></returns>
        </member>
        <member name="T:Light.Data.DataContextFactory`1">
            <summary>
            Abstract DataContext Factory
            </summary>
            <typeparam name="TContxt"></typeparam>
        </member>
        <member name="F:Light.Data.DataContextFactory`1.options">
            <summary>
            Options
            </summary>
        </member>
        <member name="M:Light.Data.DataContextFactory`1.#ctor(Light.Data.DataContextOptions{`0})">
            <summary>
            
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Light.Data.DataContextFactory`1.CreateDataContext">
            <summary>
            Create Specified DataContext
            </summary>
            <returns></returns>
        </member>
        <member name="T:Light.Data.LightDataContextFactory">
            <summary>
            Basic DataContext Factory 
            </summary>
        </member>
        <member name="M:Light.Data.LightDataContextFactory.#ctor(Light.Data.DataContextOptions{Light.Data.DataContext})">
            <summary>
            
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Light.Data.LightDataContextFactory.CreateDataContext">
            <summary>
            Create Basic DataContext
            </summary>
            <returns></returns>
        </member>
        <member name="T:Light.Data.DataEntity">
            <summary>
            Data entity.
            </summary>
        </member>
        <member name="M:Light.Data.DataEntity.GetContext">
            <summary>
            Gets the context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataEntity.SetContext(Light.Data.DataContext)">
            <summary>
            Sets the context.
            </summary>
            <param name="context">Context.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Light.Data.DataEntitySet`1">
            <summary>
            Data Entity Set.
            </summary>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.#ctor(Light.Data.DataContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.DataEntitySet`1"/> class.
            </summary>
            <param name="context">Context.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.BatchDelete(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
            Batch delete datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Datas.</param>
            <param name="index">Index.</param>
            <param name="count">Count.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.BatchDelete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Batch delete datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Datas.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.BatchDeleteAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Batch delete datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Datas.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.BatchDeleteAsync(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Batch delete datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Datas.</param>
            <param name="index">Index.</param>
            <param name="count">Count.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.BatchInsert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Batch insert datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Datas.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.BatchInsert(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
            Batch insert datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Datas.</param>
            <param name="index">Index.</param>
            <param name="count">Count.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.BatchInsertAsync(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Batch insert datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Datas.</param>
            <param name="index">Index.</param>
            <param name="count">Count.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.BatchInsertAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Batch insert datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Datas.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.BatchUpdate(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
            Batch update datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Datas.</param>
            <param name="index">Index.</param>
            <param name="count">Count.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.BatchUpdate(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Batch update datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Datas.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.BatchUpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Batch update datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Datas.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.BatchUpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Batch update datas.
            </summary>
            <returns>result.</returns>
            <param name="datas">Datas.</param>
            <param name="index">Index.</param>
            <param name="count">Count.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.Delete(`0)">
            <summary>
            Delete the specified data.
            </summary>
            <returns>The delete.</returns>
            <param name="data">Data.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Delete the specified data.
            </summary>
            <returns>result.</returns>
            <param name="data">Data.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.Insert(`0)">
            <summary>
            Insert the specified data.
            </summary>
            <returns>The insert count.</returns>
            <param name="data">Data.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.InsertAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Insert the specified data.
            </summary>
            <returns>result.</returns>
            <param name="data">Data.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.InsertOrUpdate(`0)">
            <summary>
            Insert or update the specified data.
            </summary>
            <returns>result.</returns>
            <param name="data">Data.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.InsertOrUpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Insert or update the specified data.
            </summary>
            <returns>result.</returns>
            <param name="data">Data.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.SelectById(System.Object)">
            <summary>
            Select the single object by id.
            </summary>
            <returns>object.</returns>
            <param name="id">Identifier.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.SelectByIdAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Select data by identifier.
            </summary>
            <returns>result.</returns>
            <param name="id">Identifier.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.SelectByKey(System.Object[])">
            <summary>
            Select the single object by keys.
            </summary>
            <returns>result.</returns>
            <param name="primaryKeys">Primary keys.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.SelectByKeyAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Select the single object by keys.
            </summary>
            <returns>result.</returns>
            <param name="primaryKey">Primary key.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.SelectByKeyAsync(System.Object,System.Object,System.Threading.CancellationToken)">
            <summary>
            Select the single object by keys.
            </summary>
            <returns>result.</returns>
            <param name="primaryKey1">Primary key 1.</param>
            <param name="primaryKey2">Primary key 2.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.SelectByKeyAsync(System.Object,System.Object,System.Object,System.Threading.CancellationToken)">
            <summary>
            Select the single object by keys.
            </summary>
            <returns>result.</returns>
            <param name="primaryKey1">Primary key 1.</param>
            <param name="primaryKey2">Primary key 2.</param>
            <param name="primaryKey3">Primary key 3.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.SelectByKeyAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
            Select the single object by keys.
            </summary>
            <returns>result.</returns>
            <param name="primaryKeys">Primary keys.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.Exists(System.Object[])">
            <summary>
            Check exist the object by keys.
            </summary>
            <returns>exists or not.</returns>
            <param name="primaryKeys">Primary keys.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.ExistsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Check exist the object by keys.
            </summary>
            <returns>exists or not.</returns>
            <param name="primaryKey">Primary key.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.ExistsAsync(System.Object,System.Object,System.Threading.CancellationToken)">
            <summary>
            Check exist the object by keys.
            </summary>
            <returns>exists or not.</returns>
            <param name="primaryKey1">Primary key 1.</param>
            <param name="primaryKey2">Primary key 2.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.ExistsAsync(System.Object,System.Object,System.Object,System.Threading.CancellationToken)">
            <summary>
            Check exist the object by keys.
            </summary>
            <returns>exists or not.</returns>
            <param name="primaryKey1">Primary key 1.</param>
            <param name="primaryKey2">Primary key 2.</param>
            <param name="primaryKey3">Primary key 3.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.ExistsAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
            Check exist the object by keys.
            </summary>
            <returns>exists or not.</returns>
            <param name="primaryKeys">Primary keys.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.Update(`0)">
            <summary>
            Update the specified data.
            </summary>
            <returns>The update count.</returns>
            <param name="data">Data.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates the.
            </summary>
            <returns>exists or not.</returns>
            <param name="data">Data.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.Query">
            <summary>
            Create query expression.
            </summary>
            <returns>The queryable.</returns>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Create query expression with where condition.
            </summary>
            <returns>The queryable.</returns>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Create query expression with order asc.
            </summary>
            <returns>The queryable.</returns>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">The field type.</typeparam>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Create query expression with order desc.
            </summary>
            <returns>The queryable.</returns>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">The field type.</typeparam>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.OrderByRandom">
            <summary>
            Create query expression with order random.
            </summary>
            <returns>The by random.</returns>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Create Selector.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.Aggregate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Create group by aggregator
            </summary>
            <returns>The by.</returns>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.DataEntitySet`1.SelectField``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Select special field.
            </summary>
            <returns>The field.</returns>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="T:Light.Data.AliasDataFieldInfo">
            <summary>
            Alias data field info.
            </summary>
        </member>
        <member name="P:Light.Data.AliasDataFieldInfo.AliasName">
            <summary>
            Gets the alias.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:Light.Data.AliasDataFieldInfo.BaseFieldInfo">
            <summary>
            Gets the base field info.
            </summary>
            <value>The base field info.</value>
        </member>
        <member name="M:Light.Data.AliasDataFieldInfo.#ctor(Light.Data.DataFieldInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.AliasDataFieldInfo"/> class.
            </summary>
            <param name="info">Info.</param>
            <param name="alias">Alias.</param>
        </member>
        <member name="T:Light.Data.BasicFieldInfo">
            <summary>
            Basic field info.
            </summary>
        </member>
        <member name="P:Light.Data.BasicFieldInfo.TableMapping">
            <summary>
            Gets or sets the table mapping.
            </summary>
            <value>The table mapping.</value>
        </member>
        <member name="P:Light.Data.BasicFieldInfo.FieldName">
            <summary>
            Gets the name of the field.
            </summary>
            <value>The name of the field.</value>
        </member>
        <member name="T:Light.Data.DataFieldInfo`1">
            <summary>
            Data field info.
            </summary>
        </member>
        <member name="M:Light.Data.DataFieldInfo`1.Create(System.String)">
            <summary>
            Create the specified name.
            </summary>
            <returns>The create.</returns>
            <param name="name">Name.</param>
        </member>
        <member name="T:Light.Data.DataFieldInfo">
            <summary>
            Data field info.
            </summary>
        </member>
        <member name="M:Light.Data.DataFieldInfo.CreateAliasTableInfo(System.String)">
            <summary>
            Creates the alias table info.
            </summary>
            <returns>The alias table info.</returns>
            <param name="aliasTableName">Alias table name.</param>
        </member>
        <member name="P:Light.Data.DataFieldInfo.Position">
            <summary>
            Gets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Light.Data.DataFieldInfo.DBType">
            <summary>
            Gets the DBtype of the field.
            </summary>
            <value>The type of the DB.</value>
        </member>
        <member name="F:Light.Data.DataFieldInfo._aliasTableName">
            <summary>
            The name of the alias table.
            </summary>
        </member>
        <member name="M:Light.Data.DataFieldInfo.ToParameter(System.Object)">
            <summary>
            Tos the parameter.
            </summary>
            <returns>The parameter.</returns>
            <param name="value">Value.</param>
        </member>
        <member name="F:Light.Data.DatePart.Year">
            <summary>
            The year.
            </summary>
        </member>
        <member name="F:Light.Data.DatePart.Month">
            <summary>
            The month.
            </summary>
        </member>
        <member name="F:Light.Data.DatePart.Day">
            <summary>
            The day.
            </summary>
        </member>
        <member name="F:Light.Data.DatePart.Hour">
            <summary>
            The hour.
            </summary>
        </member>
        <member name="F:Light.Data.DatePart.Minute">
            <summary>
            The minute.
            </summary>
        </member>
        <member name="F:Light.Data.DatePart.Second">
            <summary>
            The second.
            </summary>
        </member>
        <member name="F:Light.Data.DatePart.Week">
            <summary>
            The week.
            </summary>
        </member>
        <member name="F:Light.Data.DatePart.DayOfWeek">
            <summary>
            The week day.
            </summary>
        </member>
        <member name="F:Light.Data.DatePart.DayOfYear">
            <summary>
            Date part.
            </summary>
        </member>
        <member name="F:Light.Data.MathOperator.Puls">
            <summary>
            The puls.
            </summary>
        </member>
        <member name="F:Light.Data.MathOperator.Minus">
            <summary>
            The minus.
            </summary>
        </member>
        <member name="F:Light.Data.MathOperator.Multiply">
            <summary>
            The multiply.
            </summary>
        </member>
        <member name="F:Light.Data.MathOperator.Divided">
            <summary>
            The divided.
            </summary>
        </member>
        <member name="F:Light.Data.MathOperator.Mod">
            <summary>
            The mod.
            </summary>
        </member>
        <member name="F:Light.Data.MathOperator.Power">
            <summary>
            The power.
            </summary>
        </member>
        <member name="T:Light.Data.DataParameter">
            <summary>
            Data parameter.
            </summary>
        </member>
        <member name="M:Light.Data.DataParameter.#ctor(System.String,System.Object,System.String,Light.Data.DataParameterMode,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.DataParameter"/> class.
            </summary>
            <param name="paramName">Parameter name.</param>
            <param name="paramValue">Parameter value.</param>
            <param name="dbType">Db type.</param>
            <param name="direction">Direction.</param>
            <param name="dataType">Data type.</param>
        </member>
        <member name="M:Light.Data.DataParameter.#ctor(System.String,System.Object,System.String,Light.Data.DataParameterMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.DataParameter"/> class.
            </summary>
            <param name="paramName">Parameter name.</param>
            <param name="paramValue">Parameter value.</param>
            <param name="dbType">Db type.</param>
            <param name="direction">Direction.</param>
        </member>
        <member name="M:Light.Data.DataParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.DataParameter"/> class.
            </summary>
            <param name="paramName">Parameter name.</param>
            <param name="paramValue">Parameter value.</param>
        </member>
        <member name="M:Light.Data.DataParameter.#ctor(System.String,System.Object,Light.Data.DataParameterMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.DataParameter"/> class.
            </summary>
            <param name="paramName">Parameter name.</param>
            <param name="paramValue">Parameter value.</param>
            <param name="direction">Direction.</param>
        </member>
        <member name="M:Light.Data.DataParameter.#ctor(System.String,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.DataParameter"/> class.
            </summary>
            <param name="paramName">Parameter name.</param>
            <param name="paramValue">Parameter value.</param>
            <param name="dbType">Db type.</param>
        </member>
        <member name="M:Light.Data.DataParameter.SetDataParameter(System.Data.IDataParameter)">
            <summary>
            Sets the data parameter.
            </summary>
            <param name="dataParameter">Data parameter.</param>
        </member>
        <member name="P:Light.Data.DataParameter.ParameterName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:Light.Data.DataParameter.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Light.Data.DataParameter.DbType">
            <summary>
            Gets or sets the DBType.
            </summary>
            <value>The type of the db.</value>
        </member>
        <member name="P:Light.Data.DataParameter.Direction">
            <summary>
            Gets or sets the direction.
            </summary>
            <value>The direction.</value>
        </member>
        <member name="P:Light.Data.DataParameter.DataType">
            <summary>
            Gets the data type
            </summary>
        </member>
        <member name="T:Light.Data.DataParameterMode">
            <summary>
            Data Parameter Direction Mode
            </summary>
        </member>
        <member name="F:Light.Data.DataParameterMode.Input">
            <summary>
            Input
            </summary>
        </member>
        <member name="F:Light.Data.DataParameterMode.Output">
            <summary>
            Output
            </summary>
        </member>
        <member name="F:Light.Data.DataParameterMode.InputOutput">
            <summary>
            Input or output
            </summary>
        </member>
        <member name="T:Light.Data.DataTableEntity">
            <summary>
            Data table entity
            </summary>
        </member>
        <member name="M:Light.Data.DataTableEntity.Save">
            <summary>
            Check the data exists in the database and save data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataTableEntity.Save(System.Boolean,System.Boolean)">
            <summary>
            Save data
            </summary>
            <param name="checkDb">Whether to check the data exists in the database</param>
            <param name="refresh">Whether to set the default value to null field</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataTableEntity.Save(Light.Data.SafeLevel,System.Boolean)">
            <summary>
            Check the data exists in the database and save data
            </summary>
            <param name="safeLevel">Translation level</param>
            <param name="refresh">Whether to set the default value to null field</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataTableEntity.Save(Light.Data.SafeLevel)">
            <summary>
            Check the data exists in the database and save data
            </summary>
            <param name="safeLevel">Translation level</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataTableEntity.Save(System.Boolean)">
            <summary>
            Check the data exists in the database and save data
            </summary>
            <param name="refresh">Whether to set the default value to null field</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataTableEntity.SaveAsync(System.Threading.CancellationToken)">
            <summary>
            Check the data exists in the database and save data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataTableEntity.SaveAsync(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Save data
            </summary>
            <param name="checkDb">Whether to check the data exists in the database</param>
            <param name="refresh">Whether to set the default value to null field</param>
            <param name="cancellationToken">CancellationToken.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataTableEntity.SaveAsync(Light.Data.SafeLevel,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Check the data exists in the database and save data
            </summary>
            <param name="safeLevel">Translation level</param>
            <param name="refresh">Whether to set the default value to null field</param>
            <param name="cancellationToken">CancellationToken.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataTableEntity.SaveAsync(Light.Data.SafeLevel,System.Threading.CancellationToken)">
            <summary>
            Check the data exists in the database and save data
            </summary>
            <param name="safeLevel">Translation level</param>
            <returns></returns>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.DataTableEntity.SaveAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Check the data exists in the database and save data
            </summary>
            <param name="refresh">Whether to set the default value to null field</param>
            <param name="cancellationToken">CancellationToken.</param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataTableEntity.Erase">
            <summary>
            Delete data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataTableEntity.EraseAsync(System.Threading.CancellationToken)">
            <summary>
            Delete data
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.DataTableEntity.Reset">
            <summary>
            Reset inner data
            </summary>
        </member>
        <member name="M:Light.Data.DataTableEntity.UpdateDataNotify(System.String)">
            <summary>
            Set update field
            </summary>
            <param name="fieldName">Field name</param>
        </member>
        <member name="M:Light.Data.DataTableEntity.AllowUpdatePrimaryKey(System.Boolean)">
            <summary>
            Allow update primary key when change the primary key.
            </summary>
            <param name="allow"></param>
        </member>
        <member name="T:Light.Data.DateTimeFormater">
            <summary>
            Date time formater.
            </summary>
        </member>
        <member name="P:Light.Data.DateTimeFormater.YearFormat">
            <summary>
            Gets or sets the year format.
            </summary>
            <value>The year format.</value>
        </member>
        <member name="P:Light.Data.DateTimeFormater.MonthFormat">
            <summary>
            Gets or sets the month format.
            </summary>
            <value>The month format.</value>
        </member>
        <member name="P:Light.Data.DateTimeFormater.DayFormat">
            <summary>
            Gets or sets the day format.
            </summary>
            <value>The day format.</value>
        </member>
        <member name="P:Light.Data.DateTimeFormater.HourFormat">
            <summary>
            Gets or sets the hour format.
            </summary>
            <value>The hour format.</value>
        </member>
        <member name="P:Light.Data.DateTimeFormater.MinuteFormat">
            <summary>
            Gets or sets the minute format.
            </summary>
            <value>The minute format.</value>
        </member>
        <member name="P:Light.Data.DateTimeFormater.SecondFormat">
            <summary>
            Gets or sets the second format.
            </summary>
            <value>The second format.</value>
        </member>
        <member name="M:Light.Data.DateTimeFormater.FormatData(System.String)">
            <summary>
            Formats the data.
            </summary>
            <returns>The data.</returns>
            <param name="format">Format.</param>
        </member>
        <member name="T:Light.Data.CatchOperatorsType">
            <summary>
            Catch operators type.
            </summary>
        </member>
        <member name="F:Light.Data.CatchOperatorsType.AND">
            <summary>
            AND.
            </summary>
        </member>
        <member name="F:Light.Data.CatchOperatorsType.OR">
            <summary>
            OR.
            </summary>
        </member>
        <member name="T:Light.Data.DataFieldExpression">
            <summary>
            Data field expression.
            </summary>
        </member>
        <member name="M:Light.Data.DataFieldExpression.And(Light.Data.DataFieldExpression,Light.Data.DataFieldExpression)">
            <summary>
            And the specified expression1 and expression2.
            </summary>
            <param name="expression1">Expression1.</param>
            <param name="expression2">Expression2.</param>
        </member>
        <member name="M:Light.Data.DataFieldExpression.Or(Light.Data.DataFieldExpression,Light.Data.DataFieldExpression)">
            <summary>
            Or the specified expression1 and expression2.
            </summary>
            <param name="expression1">Expression1.</param>
            <param name="expression2">Expression2.</param>
        </member>
        <member name="M:Light.Data.DataFieldExpression.op_BitwiseAnd(Light.Data.DataFieldExpression,Light.Data.DataFieldExpression)">
            <param name="expression1">Expression1.</param>
            <param name="expression2">Expression2.</param>
        </member>
        <member name="M:Light.Data.DataFieldExpression.op_BitwiseOr(Light.Data.DataFieldExpression,Light.Data.DataFieldExpression)">
            <param name="expression1">Expression1.</param>
            <param name="expression2">Expression2.</param>
        </member>
        <member name="M:Light.Data.DataFieldExpression.ConvertQueryExpression">
            <summary>
            Converts the query expression.
            </summary>
            <returns>The query expression.</returns>
        </member>
        <member name="M:Light.Data.DataFieldExpression.op_Implicit(Light.Data.DataFieldExpression)~Light.Data.QueryExpression">
            <param name="expression">Expression.</param>
        </member>
        <member name="T:Light.Data.DataFieldMatchExpression">
            <summary>
            Data field match expression.
            </summary>
        </member>
        <member name="M:Light.Data.DataFieldMatchExpression.#ctor(Light.Data.DataFieldInfo,Light.Data.DataFieldInfo,Light.Data.QueryPredicate)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.DataFieldMatchExpression"/> class.
            </summary>
            <param name="leftField">Left field.</param>
            <param name="rightField">Right field.</param>
            <param name="predicate">Predicate.</param>
        </member>
        <member name="M:Light.Data.DataFieldMatchExpression.CreateSqlString(Light.Data.CommandFactory,System.Boolean,Light.Data.CreateSqlState)">
            <summary>
            Creates the sql string.
            </summary>
            <returns>The sql string.</returns>
            <param name="factory">Factory.</param>
            <param name="isFullName">If set to <c>true</c> is full name.</param>
            <param name="state">State.</param>
        </member>
        <member name="M:Light.Data.DataFieldMatchExpression.ConvertQueryExpression">
            <summary>
            Converts the query expression.
            </summary>
            <returns>The query expression.</returns>
        </member>
        <member name="T:Light.Data.LightExpression">
            <summary>
            Base expression.
            </summary>
        </member>
        <member name="P:Light.Data.LightExpression.TableMapping">
            <summary>
            Gets or sets the table mapping.
            </summary>
            <value>The table mapping.</value>
        </member>
        <member name="T:Light.Data.LightMatchQuerryExpression">
            <summary>
            Lambda match expression.
            </summary>
        </member>
        <member name="T:Light.Data.OrderExpression">
            <summary>
            Order expression.
            </summary>
        </member>
        <member name="M:Light.Data.OrderExpression.Catch(Light.Data.OrderExpression,Light.Data.OrderExpression)">
            <summary>
            Catch the specified expression1 and expression2.
            </summary>
            <param name="expression1">Expression1.</param>
            <param name="expression2">Expression2.</param>
        </member>
        <member name="M:Light.Data.OrderExpression.op_BitwiseAnd(Light.Data.OrderExpression,Light.Data.OrderExpression)">
            <param name="expression1">Expression1.</param>
            <param name="expression2">Expression2.</param>
        </member>
        <member name="M:Light.Data.OrderExpression.CreateSqlString(Light.Data.CommandFactory,System.Boolean,Light.Data.CreateSqlState)">
            <summary>
            Creates the sql string.
            </summary>
            <returns>The sql string.</returns>
            <param name="factory">Factory.</param>
            <param name="isFullName">If set to <c>true</c> is full name.</param>
            <param name="state">State.</param>
        </member>
        <member name="T:Light.Data.OrderType">
            <summary>
            Order type.
            </summary>
        </member>
        <member name="F:Light.Data.OrderType.ASC">
            <summary>
            ASC.
            </summary>
        </member>
        <member name="F:Light.Data.OrderType.DESC">
            <summary>
            DESC.
            </summary>
        </member>
        <member name="T:Light.Data.QueryExpression">
            <summary>
            Query expression.
            </summary>
        </member>
        <member name="M:Light.Data.QueryExpression.CreateSqlString(Light.Data.CommandFactory,System.Boolean,Light.Data.CreateSqlState)">
            <summary>
            Creates the sql string.
            </summary>
            <returns>The sql string.</returns>
            <param name="factory">Factory.</param>
            <param name="isFullName">If set to <c>true</c> is full name.</param>
            <param name="state">State.</param>
        </member>
        <member name="M:Light.Data.QueryExpression.Catch(Light.Data.QueryExpression,Light.Data.CatchOperatorsType,Light.Data.QueryExpression)">
            <summary>
            Catch the specified expression1, operatorType and expression2.
            </summary>
            <param name="expression1">Expression1.</param>
            <param name="operatorType">Operator type.</param>
            <param name="expression2">Expression2.</param>
        </member>
        <member name="M:Light.Data.QueryExpression.And(Light.Data.QueryExpression,Light.Data.QueryExpression)">
            <summary>
            And the specified expression1 and expression2.
            </summary>
            <param name="expression1">Expression1.</param>
            <param name="expression2">Expression2.</param>
        </member>
        <member name="M:Light.Data.QueryExpression.Or(Light.Data.QueryExpression,Light.Data.QueryExpression)">
            <summary>
            Or the specified expression1 and expression2.
            </summary>
            <param name="expression1">Expression1.</param>
            <param name="expression2">Expression2.</param>
        </member>
        <member name="M:Light.Data.QueryExpression.op_BitwiseAnd(Light.Data.QueryExpression,Light.Data.QueryExpression)">
            <param name="expression1">Expression1.</param>
            <param name="expression2">Expression2.</param>
        </member>
        <member name="M:Light.Data.QueryExpression.op_BitwiseOr(Light.Data.QueryExpression,Light.Data.QueryExpression)">
            <param name="expression1">Expression1.</param>
            <param name="expression2">Expression2.</param>
        </member>
        <member name="T:Light.Data.QueryPredicate">
            <summary>
            Query predicate.
            </summary>
        </member>
        <member name="T:Light.Data.QueryCollectionPredicate">
            <summary>
            Query collection predicate.
            </summary>
        </member>
        <member name="T:Light.Data.RandomOrderExpression">
            <summary>
            Random order expression.
            </summary>
        </member>
        <member name="T:Light.Data.ExtendQuery">
            <summary>
            Extend query.
            </summary>
        </member>
        <member name="M:Light.Data.ExtendQuery.Exists``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Exists expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="T">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ExtendQuery.In``2(``1,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            The specified field in the collection.
            </summary>
            <returns>The in.</returns>
            <param name="field">Field.</param>
            <param name="selectField">Select field.</param>
            <typeparam name="T">Data type.</typeparam>
            <typeparam name="K">The 2nd type parameter.</typeparam>
        </member>
        <member name="M:Light.Data.ExtendQuery.In``2(``1,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            The specified field in the collection.
            </summary>
            <returns>The in.</returns>
            <param name="field">Field.</param>
            <param name="selectField">Select field.</param>
            <param name="expression">Expression.</param>
            <typeparam name="T">Data type.</typeparam>
            <typeparam name="K">The 2nd type parameter.</typeparam>
        </member>
        <member name="M:Light.Data.ExtendQuery.GtAll``2(``1,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            The specified field greater than all elememts in the collection.
            </summary>
            <returns><c>true</c>, if all was gted, <c>false</c> otherwise.</returns>
            <param name="field">Field.</param>
            <param name="selectField">Select field.</param>
            <typeparam name="T">Data type.</typeparam>
            <typeparam name="K">The 2nd type parameter.</typeparam>
        </member>
        <member name="M:Light.Data.ExtendQuery.GtAll``2(``1,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            The specified field greater than all elememts in the collection.
            </summary>
            <returns><c>true</c>, if all was gted, <c>false</c> otherwise.</returns>
            <param name="field">Field.</param>
            <param name="selectField">Select field.</param>
            <param name="expression">Expression.</param>
            <typeparam name="T">Data type.</typeparam>
            <typeparam name="K">The 2nd type parameter.</typeparam>
        </member>
        <member name="M:Light.Data.ExtendQuery.LtAll``2(``1,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            The specified field less than all elememts in the collection.
            </summary>
            <returns><c>true</c>, if all was lted, <c>false</c> otherwise.</returns>
            <param name="field">Field.</param>
            <param name="selectField">Select field.</param>
            <typeparam name="T">Data type.</typeparam>
            <typeparam name="K">The 2nd type parameter.</typeparam>
        </member>
        <member name="M:Light.Data.ExtendQuery.LtAll``2(``1,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            The specified field less than all elememts in the collection.
            </summary>
            <returns><c>true</c>, if all was lted, <c>false</c> otherwise.</returns>
            <param name="field">Field.</param>
            <param name="selectField">Select field.</param>
            <param name="expression">Expression.</param>
            <typeparam name="T">Data type.</typeparam>
            <typeparam name="K">The 2nd type parameter.</typeparam>
        </member>
        <member name="M:Light.Data.ExtendQuery.GtAny``2(``1,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            The specified field greater than any elememts in the collection.
            </summary>
            <returns><c>true</c>, if any was gted, <c>false</c> otherwise.</returns>
            <param name="field">Field.</param>
            <param name="selectField">Select field.</param>
            <typeparam name="T">Data type.</typeparam>
            <typeparam name="K">The 2nd type parameter.</typeparam>
        </member>
        <member name="M:Light.Data.ExtendQuery.GtAny``2(``1,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            The specified field greater than any elememts in the collection.
            </summary>
            <returns><c>true</c>, if any was gted, <c>false</c> otherwise.</returns>
            <param name="field">Field.</param>
            <param name="selectField">Select field.</param>
            <param name="expression">Expression.</param>
            <typeparam name="T">Data type.</typeparam>
            <typeparam name="K">The 2nd type parameter.</typeparam>
        </member>
        <member name="M:Light.Data.ExtendQuery.LtAny``2(``1,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            The specified field less than any elememts in the collection.
            </summary>
            <returns><c>true</c>, if any was lted, <c>false</c> otherwise.</returns>
            <param name="field">Field.</param>
            <param name="selectField">Select field.</param>
            <typeparam name="T">Data type.</typeparam>
            <typeparam name="K">The 2nd type parameter.</typeparam>
        </member>
        <member name="M:Light.Data.ExtendQuery.LtAny``2(``1,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            The specified field less than any elememts in the collection.
            </summary>
            <returns><c>true</c>, if any was lted, <c>false</c> otherwise.</returns>
            <param name="field">Field.</param>
            <param name="selectField">Select field.</param>
            <param name="expression">Expression.</param>
            <typeparam name="T">Data type.</typeparam>
            <typeparam name="K">The 2nd type parameter.</typeparam>
        </member>
        <member name="M:Light.Data.ExtendQuery.GtEqAll``2(``1,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            The specified field greater than or equal all elememts in the collection.
            </summary>
            <returns><c>true</c>, if eq all was gted, <c>false</c> otherwise.</returns>
            <param name="field">Field.</param>
            <param name="selectField">Select field.</param>
            <typeparam name="T">Data type.</typeparam>
            <typeparam name="K">The 2nd type parameter.</typeparam>
        </member>
        <member name="M:Light.Data.ExtendQuery.GtEqAll``2(``1,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            The specified field greater than or equal all elememts in the collection.
            </summary>
            <returns><c>true</c>, if eq all was gted, <c>false</c> otherwise.</returns>
            <param name="field">Field.</param>
            <param name="selectField">Select field.</param>
            <param name="expression">Expression.</param>
            <typeparam name="T">Data type.</typeparam>
            <typeparam name="K">The 2nd type parameter.</typeparam>
        </member>
        <member name="M:Light.Data.ExtendQuery.LtEqAll``2(``1,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            The specified field less than or equal all elememts in the collection.
            </summary>
            <returns><c>true</c>, if eq all was lted, <c>false</c> otherwise.</returns>
            <param name="field">Field.</param>
            <param name="selectField">Select field.</param>
            <typeparam name="T">Data type.</typeparam>
            <typeparam name="K">The 2nd type parameter.</typeparam>
        </member>
        <member name="M:Light.Data.ExtendQuery.LtEqAll``2(``1,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            The specified field less than or equal all elememts in the collection.
            </summary>
            <returns><c>true</c>, if eq all was lted, <c>false</c> otherwise.</returns>
            <param name="field">Field.</param>
            <param name="selectField">Select field.</param>
            <param name="expression">Expression.</param>
            <typeparam name="T">Data type.</typeparam>
            <typeparam name="K">The 2nd type parameter.</typeparam>
        </member>
        <member name="M:Light.Data.ExtendQuery.GtEqAny``2(``1,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            The specified field greater than or equal any elememts in the collection.
            </summary>
            <returns><c>true</c>, if eq any was gted, <c>false</c> otherwise.</returns>
            <param name="field">Field.</param>
            <param name="selectField">Select field.</param>
            <typeparam name="T">Data type.</typeparam>
            <typeparam name="K">The 2nd type parameter.</typeparam>
        </member>
        <member name="M:Light.Data.ExtendQuery.GtEqAny``2(``1,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            The specified field greater than or equal any elememts in the collection.
            </summary>
            <returns><c>true</c>, if eq any was gted, <c>false</c> otherwise.</returns>
            <param name="field">Field.</param>
            <param name="selectField">Select field.</param>
            <param name="expression">Expression.</param>
            <typeparam name="T">Data type.</typeparam>
            <typeparam name="K">The 2nd type parameter.</typeparam>
        </member>
        <member name="M:Light.Data.ExtendQuery.LtEqAny``2(``1,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            The specified field less than or equal any elememts in the collection.
            </summary>
            <returns><c>true</c>, if eq any was lted, <c>false</c> otherwise.</returns>
            <param name="field">Field.</param>
            <param name="selectField">Select field.</param>
            <typeparam name="T">Data type.</typeparam>
            <typeparam name="K">The 2nd type parameter.</typeparam>
        </member>
        <member name="M:Light.Data.ExtendQuery.LtEqAny``2(``1,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            The specified field less than or equal any elememts in the collection.
            </summary>
            <returns><c>true</c>, if eq any was lted, <c>false</c> otherwise.</returns>
            <param name="field">Field.</param>
            <param name="selectField">Select field.</param>
            <param name="expression">Expression.</param>
            <typeparam name="T">Data type.</typeparam>
            <typeparam name="K">The 2nd type parameter.</typeparam>
        </member>
        <member name="M:Light.Data.ExtendQuery.IsNull(System.Boolean)">
            <summary>
            Is null.
            </summary>
            <param name="field">If set to <c>true</c> field.</param>
        </member>
        <member name="M:Light.Data.ExtendQuery.IsNull(System.Byte)">
            <summary>
            Is null.
            </summary>
            <param name="field">If set to <c>true</c> field.</param>
        </member>
        <member name="M:Light.Data.ExtendQuery.IsNull(System.Int16)">
            <summary>
            Is null.
            </summary>
            <param name="field">If set to <c>true</c> field.</param>
        </member>
        <member name="M:Light.Data.ExtendQuery.IsNull(System.Int32)">
            <summary>
            Is null.
            </summary>
            <param name="field">If set to <c>true</c> field.</param>
        </member>
        <member name="M:Light.Data.ExtendQuery.IsNull(System.Int64)">
            <summary>
            Is null.
            </summary>
            <param name="field">If set to <c>true</c> field.</param>
        </member>
        <member name="M:Light.Data.ExtendQuery.IsNull(System.UInt16)">
            <summary>
            Is null.
            </summary>
            <param name="field">If set to <c>true</c> field.</param>
        </member>
        <member name="M:Light.Data.ExtendQuery.IsNull(System.UInt32)">
            <summary>
            Is null.
            </summary>
            <param name="field">If set to <c>true</c> field.</param>
        </member>
        <member name="M:Light.Data.ExtendQuery.IsNull(System.UInt64)">
            <summary>
            Is null.
            </summary>
            <param name="field">If set to <c>true</c> field.</param>
        </member>
        <member name="M:Light.Data.ExtendQuery.IsNull(System.Double)">
            <summary>
            Is null.
            </summary>
            <param name="field">If set to <c>true</c> field.</param>
        </member>
        <member name="M:Light.Data.ExtendQuery.IsNull(System.Single)">
            <summary>
            Is null.
            </summary>
            <param name="field">If set to <c>true</c> field.</param>
        </member>
        <member name="M:Light.Data.ExtendQuery.IsNull(System.Decimal)">
            <summary>
            Is null.
            </summary>
            <param name="field">If set to <c>true</c> field.</param>
        </member>
        <member name="M:Light.Data.ExtendQuery.IsNull(System.DateTime)">
            <summary>
            Is null.
            </summary>
            <param name="field">If set to <c>true</c> field.</param>
        </member>
        <member name="T:Light.Data.Function">
            <summary>
            Function.
            </summary>
        </member>
        <member name="M:Light.Data.Function.Count">
            <summary>
            Count all data.
            </summary>
        </member>
        <member name="M:Light.Data.Function.LongCount">
            <summary>
            Count all data.
            </summary>
        </member>
        <member name="M:Light.Data.Function.CountCondition(System.Boolean)">
            <summary>
            Count all data with condition.
            </summary>
        </member>
        <member name="M:Light.Data.Function.LongCountCondition(System.Boolean)">
            <summary>
            Count all data with condition.
            </summary>
        </member>
        <member name="M:Light.Data.Function.Count(System.String)">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Byte[])">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Boolean)">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">If set to <c>true</c> field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Nullable{System.Boolean})">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Byte)">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Nullable{System.Byte})">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.SByte)">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Nullable{System.SByte})">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Int16)">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Nullable{System.Int16})">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.UInt16)">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Nullable{System.UInt16})">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Int32)">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Nullable{System.Int32})">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.UInt32)">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Nullable{System.UInt32})">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Int64)">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Nullable{System.Int64})">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.UInt64)">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Nullable{System.UInt64})">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Double)">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Nullable{System.Double})">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Single)">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Nullable{System.Single})">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Decimal)">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Nullable{System.Decimal})">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.DateTime)">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Count(System.Nullable{System.DateTime})">
            <summary>
            Count the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.String)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Byte[])">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Boolean)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">If set to <c>true</c> field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Nullable{System.Boolean})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Byte)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Nullable{System.Byte})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.SByte)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Nullable{System.SByte})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Int16)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Nullable{System.Int16})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.UInt16)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Nullable{System.UInt16})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Int32)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Nullable{System.Int32})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.UInt32)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Nullable{System.UInt32})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Int64)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Nullable{System.Int64})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.UInt64)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Nullable{System.UInt64})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Double)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Nullable{System.Double})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Single)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Nullable{System.Single})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Decimal)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Nullable{System.Decimal})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.DateTime)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctCount(System.Nullable{System.DateTime})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.String)">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Byte[])">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Boolean)">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">If set to <c>true</c> field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Nullable{System.Boolean})">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Byte)">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Nullable{System.Byte})">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.SByte)">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Nullable{System.SByte})">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Int16)">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Nullable{System.Int16})">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.UInt16)">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Nullable{System.UInt16})">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Int32)">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Nullable{System.Int32})">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.UInt32)">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Nullable{System.UInt32})">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Int64)">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Nullable{System.Int64})">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.UInt64)">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Nullable{System.UInt64})">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Double)">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Nullable{System.Double})">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Single)">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Nullable{System.Single})">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Decimal)">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Nullable{System.Decimal})">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.DateTime)">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongCount(System.Nullable{System.DateTime})">
            <summary>
            Count the specified field.
            </summary>
            <returns>The count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.String)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Byte[])">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Boolean)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">If set to <c>true</c> field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Nullable{System.Boolean})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Byte)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Nullable{System.Byte})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.SByte)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Nullable{System.SByte})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Int16)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Nullable{System.Int16})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.UInt16)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Nullable{System.UInt16})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Int32)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Nullable{System.Int32})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.UInt32)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Nullable{System.UInt32})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Int64)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Nullable{System.Int64})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.UInt64)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Nullable{System.UInt64})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Double)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Nullable{System.Double})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Single)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Nullable{System.Single})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Decimal)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Nullable{System.Decimal})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.DateTime)">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongCount(System.Nullable{System.DateTime})">
            <summary>
            Distinct count the specified field.
            </summary>
            <returns>The long count.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.Byte)">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.Nullable{System.Byte})">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.SByte)">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.Nullable{System.SByte})">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongSum(System.Byte)">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongSum(System.Nullable{System.Byte})">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongSum(System.SByte)">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongSum(System.Nullable{System.SByte})">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.Int16)">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.Nullable{System.Int16})">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.UInt16)">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.Nullable{System.UInt16})">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongSum(System.Int16)">
            <summary>
            Sum the specified field.
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongSum(System.Nullable{System.Int16})">
            <summary>
            Sum the specified field.
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongSum(System.UInt16)">
            <summary>
            Sum the specified field.
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongSum(System.Nullable{System.UInt16})">
            <summary>
            Sum the specified field.
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.Int32)">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.Nullable{System.Int32})">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.UInt32)">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.Nullable{System.UInt32})">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongSum(System.Int32)">
            <summary>
            Sum the specified field.
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongSum(System.Nullable{System.Int32})">
            <summary>
            Sum the specified field.
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongSum(System.UInt32)">
            <summary>
            Sum the specified field.
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.LongSum(System.Nullable{System.UInt32})">
            <summary>
            Sum the specified field.
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.Int64)">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.Nullable{System.Int64})">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.UInt64)">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.Nullable{System.UInt64})">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.Double)">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.Nullable{System.Double})">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.Single)">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.Nullable{System.Single})">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.Decimal)">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Sum(System.Nullable{System.Decimal})">
            <summary>
            Sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.Byte)">
            <summary>
            Distinct sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.Nullable{System.Byte})">
            <summary>
            Distinct sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.SByte)">
            <summary>
            Distinct sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.Nullable{System.SByte})">
            <summary>
            Distinct sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongSum(System.Byte)">
            <summary>
            Distinct sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongSum(System.Nullable{System.Byte})">
            <summary>
            Distinct sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongSum(System.SByte)">
            <summary>
            Distinct sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongSum(System.Nullable{System.SByte})">
            <summary>
            Distinct sum the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.Int16)">
            <summary>
            Distinct sum the specified field
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.Nullable{System.Int16})">
            <summary>
            Distinct sum the specified field
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.UInt16)">
            <summary>
            Distinct sum the specified field
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.Nullable{System.UInt16})">
            <summary>
            Distinct sum the specified field
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongSum(System.Int16)">
            <summary>
            Distincts the long sum.
            </summary>
            <returns>The long sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongSum(System.Nullable{System.Int16})">
            <summary>
            Distincts the long sum.
            </summary>
            <returns>The long sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongSum(System.UInt16)">
            <summary>
            Distincts the long sum.
            </summary>
            <returns>The long sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongSum(System.Nullable{System.UInt16})">
            <summary>
            Distincts the long sum.
            </summary>
            <returns>The long sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.Int32)">
            <summary>
            Distinct sum the specified field
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.Nullable{System.Int32})">
            <summary>
            Distinct sum the specified field
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.UInt32)">
            <summary>
            Distinct sum the specified field
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.Nullable{System.UInt32})">
            <summary>
            Distinct sum the specified field
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongSum(System.Int32)">
            <summary>
            Distincts the long sum.
            </summary>
            <returns>The long sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongSum(System.Nullable{System.Int32})">
            <summary>
            Distincts the long sum.
            </summary>
            <returns>The long sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongSum(System.UInt32)">
            <summary>
            Distincts the long sum.
            </summary>
            <returns>The long sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctLongSum(System.Nullable{System.UInt32})">
            <summary>
            Distincts the long sum.
            </summary>
            <returns>The long sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.Int64)">
            <summary>
            Distinct sum the specified field
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.Nullable{System.Int64})">
            <summary>
            Distinct sum the specified field
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.UInt64)">
            <summary>
            Distinct sum the specified field
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.Nullable{System.UInt64})">
            <summary>
            Distinct sum the specified field
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.Double)">
            <summary>
            Distinct sum the specified field
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.Nullable{System.Double})">
            <summary>
            Distinct sum the specified field
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.Single)">
            <summary>
            Distinct sum the specified field
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.Nullable{System.Single})">
            <summary>
            Distinct sum the specified field
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.Decimal)">
            <summary>
            Distinct sum the specified field
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctSum(System.Nullable{System.Decimal})">
            <summary>
            Distinct sum the specified field
            </summary>
            <returns>The sum.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.Byte)">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.Nullable{System.Byte})">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.SByte)">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.Nullable{System.SByte})">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.Int16)">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.Nullable{System.Int16})">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.UInt16)">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.Nullable{System.UInt16})">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.Int32)">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.Nullable{System.Int32})">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.UInt32)">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.Nullable{System.UInt32})">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.Int64)">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.Nullable{System.Int64})">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.UInt64)">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.Nullable{System.UInt64})">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.Double)">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.Nullable{System.Double})">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.Single)">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.Nullable{System.Single})">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.Decimal)">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Avg(System.Nullable{System.Decimal})">
            <summary>
            Avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.Byte)">
            <summary>
            Distinct avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.Nullable{System.Byte})">
            <summary>
            Distinct avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.SByte)">
            <summary>
            Distinct avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.Nullable{System.SByte})">
            <summary>
            Distinct avg the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.Int16)">
            <summary>
            Distinct avg the specified field.
            </summary>
            <returns>The avg.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.Nullable{System.Int16})">
            <summary>
            Distinct avg the specified field.
            </summary>
            <returns>The avg.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.UInt16)">
            <summary>
            Distinct avg the specified field.
            </summary>
            <returns>The avg.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.Nullable{System.UInt16})">
            <summary>
            Distinct avg the specified field.
            </summary>
            <returns>The avg.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.Int32)">
            <summary>
            Distinct avg the specified field.
            </summary>
            <returns>The avg.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.Nullable{System.Int32})">
            <summary>
            Distinct avg the specified field.
            </summary>
            <returns>The avg.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.UInt32)">
            <summary>
            Distinct avg the specified field.
            </summary>
            <returns>The avg.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.Nullable{System.UInt32})">
            <summary>
            Distinct avg the specified field.
            </summary>
            <returns>The avg.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.Int64)">
            <summary>
            Distinct avg the specified field.
            </summary>
            <returns>The avg.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.Nullable{System.Int64})">
            <summary>
            Distinct avg the specified field.
            </summary>
            <returns>The avg.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.UInt64)">
            <summary>
            Distinct avg the specified field.
            </summary>
            <returns>The avg.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.Nullable{System.UInt64})">
            <summary>
            Distinct avg the specified field.
            </summary>
            <returns>The avg.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.Double)">
            <summary>
            Distinct avg the specified field.
            </summary>
            <returns>The avg.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.Nullable{System.Double})">
            <summary>
            Distinct avg the specified field.
            </summary>
            <returns>The avg.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.Single)">
            <summary>
            Distinct avg the specified field.
            </summary>
            <returns>The avg.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.Nullable{System.Single})">
            <summary>
            Distinct avg the specified field.
            </summary>
            <returns>The avg.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.Decimal)">
            <summary>
            Distinct avg the specified field.
            </summary>
            <returns>The avg.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.DistinctAvg(System.Nullable{System.Decimal})">
            <summary>
            Distinct avg the specified field.
            </summary>
            <returns>The avg.</returns>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.Byte)">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.Nullable{System.Byte})">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.SByte)">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.Nullable{System.SByte})">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.Int16)">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.Nullable{System.Int16})">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.UInt16)">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.Nullable{System.UInt16})">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.Int32)">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.Nullable{System.Int32})">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.UInt32)">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.Nullable{System.UInt32})">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.Int64)">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.Nullable{System.Int64})">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.UInt64)">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.Nullable{System.UInt64})">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.Double)">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.Nullable{System.Double})">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.Single)">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.Nullable{System.Single})">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.Decimal)">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.Nullable{System.Decimal})">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.DateTime)">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Max(System.Nullable{System.DateTime})">
            <summary>
            Get max value from the specified field
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.Byte)">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.Nullable{System.Byte})">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.SByte)">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.Nullable{System.SByte})">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.Int16)">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.Nullable{System.Int16})">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.UInt16)">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.Nullable{System.UInt16})">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.Int32)">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.Nullable{System.Int32})">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.UInt32)">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.Nullable{System.UInt32})">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.Int64)">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.Nullable{System.Int64})">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.UInt64)">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.Nullable{System.UInt64})">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.Double)">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.Nullable{System.Double})">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.Single)">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.Nullable{System.Single})">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.Decimal)">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.Nullable{System.Decimal})">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.DateTime)">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:Light.Data.Function.Min(System.Nullable{System.DateTime})">
            <summary>
            Get min value from the specified field.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="T:Light.Data.FunctionControl">
            <summary>
            Data fielf function control
            </summary>
        </member>
        <member name="F:Light.Data.FunctionControl.Default">
            <summary>
            Full control
            </summary>
        </member>
        <member name="F:Light.Data.FunctionControl.Read">
            <summary>
            Allow select
            </summary>
        </member>
        <member name="F:Light.Data.FunctionControl.Create">
            <summary>
            Allow insert
            </summary>
        </member>
        <member name="F:Light.Data.FunctionControl.Update">
            <summary>
            Allow update
            </summary>
        </member>
        <member name="F:Light.Data.FunctionControl.Full">
            <summary>
            Full control
            </summary>
        </member>
        <member name="T:Light.Data.ICommandOutput">
            <summary>
            ICommand output.
            </summary>
        </member>
        <member name="M:Light.Data.ICommandOutput.Output(Light.Data.CommandOutputInfo)">
            <summary>
            Output the specified info.
            </summary>
            <returns>The output.</returns>
            <param name="info">Info.</param>
        </member>
        <member name="T:Light.Data.IConnectionSetting">
            <summary>
            Connection setting.
            </summary>
        </member>
        <member name="P:Light.Data.IConnectionSetting.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Light.Data.IConnectionSetting.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Light.Data.IConnectionSetting.ProviderName">
            <summary>
            Gets the name of the provider.
            </summary>
            <value>The name of the provider.</value>
        </member>
        <member name="P:Light.Data.IConnectionSetting.ConfigParam">
            <summary>
            Gets the config parameter.
            </summary>
            <value>The config parameter.</value>
        </member>
        <member name="T:Light.Data.LightDataDbException">
            <summary>
            Light data exception.
            </summary>
        </member>
        <member name="M:Light.Data.LightDataDbException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.LightDataException"/> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:Light.Data.LightDataDbException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.LightDataException"/> class.
            </summary>
            <param name="message">Message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="T:Light.Data.LightDataException">
            <summary>
            Light data exception.
            </summary>
        </member>
        <member name="M:Light.Data.LightDataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.LightDataException"/> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:Light.Data.LightDataException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.LightDataException"/> class.
            </summary>
            <param name="message">Message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="T:Light.Data.BaseRelationFieldMapping">
            <summary>
            Base relation field mapping.
            </summary>
        </member>
        <member name="M:Light.Data.BytesDataDefine.LoadData(Light.Data.DataContext,System.Data.IDataReader,System.Object)">
            <summary>
            Loads the data.
            </summary>
            <returns>The data.</returns>
            <param name="context">Context.</param>
            <param name="datareader">Datareader.</param>
            <param name="state">State.</param>
        </member>
        <member name="T:Light.Data.CollectionRelationFieldMapping">
            <summary>
            Collection relation field mapping.
            </summary>
        </member>
        <member name="T:Light.Data.CustomFieldMapping">
            <summary>
            Custom field mapping.
            </summary>
        </member>
        <member name="T:Light.Data.DataDefine">
            <summary>
            Data define.
            </summary>
        </member>
        <member name="T:Light.Data.DataEntityMapping">
            <summary>
            Data entity mapping.
            </summary>
        </member>
        <member name="M:Light.Data.DataEntityMapping.GetTableMapping(System.Type)">
            <summary>
            Gets the table mapping.
            </summary>
            <returns>The table mapping.</returns>
            <param name="type">Type.</param>
        </member>
        <member name="M:Light.Data.DataEntityMapping.GetEntityMapping(System.Type)">
            <summary>
            Gets the entity mapping.
            </summary>
            <returns>The entity mapping.</returns>
            <param name="type">Type.</param>
        </member>
        <member name="M:Light.Data.DataEntityMapping.CheckMapping(System.Type)">
            <summary>
            Checks the entity mapping.must execute GetMapping method first
            </summary>
            <returns>The entity mapping.</returns>
            <param name="type">Type.</param>
        </member>
        <member name="M:Light.Data.DataEntityMapping.CreateMapping(System.Type)">
            <summary>
            Creates the mapping.
            </summary>
            <returns>The mapping.</returns>
            <param name="type">Type.</param>
        </member>
        <member name="T:Light.Data.DataFieldMapping">
            <summary>
            Data field mapping.
            </summary>
        </member>
        <member name="T:Light.Data.DataMapping">
            <summary>
            Data mapping.
            </summary>
        </member>
        <member name="M:Light.Data.DataMapping.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.DataMapping"/> class.
            </summary>
            <param name="type">Type.</param>
        </member>
        <member name="P:Light.Data.DataMapping.ObjectType">
            <summary>
            Gets or sets the type of the object.
            </summary>
            <value>The type of the object.</value>
        </member>
        <member name="P:Light.Data.DataMapping.ExtentParams">
            <summary>
            Gets or sets the extent parameters.
            </summary>
            <value>The extent parameters.</value>
        </member>
        <member name="T:Light.Data.DataTableEntityMapping">
            <summary>
            Data table entity mapping.
            </summary>
        </member>
        <member name="P:Light.Data.DataTableEntityMapping.HasIdentity">
            <summary>
            Gets a value indicating whether this instance has identity.
            </summary>
            <value><c>true</c> if this instance has identity; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Light.Data.DataTableEntityMapping.HasPrimaryKey">
            <summary>
            Gets a value indicating whether this instance has primary key.
            </summary>
            <value><c>true</c> if this instance has primary key; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Light.Data.DataTableEntityMapping.PrimaryKeyCount">
            <summary>
            Gets the primary key count.
            </summary>
            <value>The primary key count.</value>
        </member>
        <member name="T:Light.Data.DefaultTime">
            <summary>
            Default time.
            </summary>
        </member>
        <member name="F:Light.Data.DefaultTime.Now">
            <summary>
            The now.
            </summary>
        </member>
        <member name="F:Light.Data.DefaultTime.Today">
            <summary>
            The today.
            </summary>
        </member>
        <member name="F:Light.Data.DefaultTime.TimeStamp">
            <summary>
            The timestamp
            </summary>
        </member>
        <member name="F:Light.Data.DefaultTime.UtcNow">
            <summary>
            The utc now.
            </summary>
        </member>
        <member name="F:Light.Data.DefaultTime.UtcToday">
            <summary>
            The utc today.
            </summary>
        </member>
        <member name="F:Light.Data.DefaultTime.UtcTimeStamp">
            <summary>
            The utc timestamp
            </summary>
        </member>
        <member name="T:Light.Data.DefaultTimeFunction">
            <summary>
            Default time function.
            </summary>
        </member>
        <member name="T:Light.Data.FieldMapping">
            <summary>
            Field mapping.
            </summary>
        </member>
        <member name="M:Light.Data.PrimitiveDataDefine.LoadData(Light.Data.DataContext,System.Data.IDataReader,System.Object)">
            <summary>
            Loads the data.
            </summary>
            <returns>The data.</returns>
            <param name="context">Context.</param>
            <param name="datareader">Datareader.</param>
            <param name="state">State.</param>
        </member>
        <member name="T:Light.Data.RelationPair">
            <summary>
            Relation pair.
            </summary>
        </member>
        <member name="P:Light.Data.RelationPair.RelateKey">
            <summary>
            Gets the relate key.
            </summary>
            <value>The relate key.</value>
        </member>
        <member name="P:Light.Data.RelationPair.MasterKey">
            <summary>
            Gets the master key.
            </summary>
            <value>The master key.</value>
        </member>
        <member name="T:Light.Data.SingleRelationFieldMapping">
            <summary>
            Single relation field mapping.
            </summary>
        </member>
        <member name="T:Light.Data.AggregateType">
            <summary>
            Aggregate type.
            </summary>
        </member>
        <member name="F:Light.Data.AggregateType.COUNT">
            <summary>
            The COUNT.
            </summary>
        </member>
        <member name="F:Light.Data.AggregateType.AVG">
            <summary>
            The AVG.
            </summary>
        </member>
        <member name="F:Light.Data.AggregateType.MAX">
            <summary>
            The MAX.
            </summary>
        </member>
        <member name="F:Light.Data.AggregateType.MIN">
            <summary>
            The MIN.
            </summary>
        </member>
        <member name="F:Light.Data.AggregateType.SUM">
            <summary>
            The SUM.
            </summary>
        </member>
        <member name="T:Light.Data.IAggregate`1">
            <summary>
            Aggregate.
            </summary>
        </member>
        <member name="M:Light.Data.IAggregate`1.Having(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Set the specified having expression
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IAggregate`1.HavingWithAnd(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Catch the specified having expression with and.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IAggregate`1.HavingWithOr(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Catch the specified having expression with or.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IAggregate`1.HavingReset">
            <summary>
            Reset the specified having expression.
            </summary>
        </member>
        <member name="M:Light.Data.IAggregate`1.OrderByCatch``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Catch the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IAggregate`1.OrderByDescendingCatch``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Catch the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IAggregate`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Set the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Set the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.OrderByReset">
            <summary>
            Reset the specified order by expression.
            </summary>
        </member>
        <member name="M:Light.Data.IAggregate`1.OrderByRandom">
            <summary>
            Set order by random.
            </summary>
        </member>
        <member name="M:Light.Data.IAggregate`1.ToList">
            <summary>
            To the list.
            </summary>
            <returns>The list.</returns>
        </member>
        <member name="M:Light.Data.IAggregate`1.ToArray">
            <summary>
            To the array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:Light.Data.IAggregate`1.First">
            <summary>
            Get first instance.
            </summary>
        </member>
        <member name="M:Light.Data.IAggregate`1.ElementAt(System.Int32)">
            <summary>
            Elements at index.
            </summary>
            <returns>The <see cref="!:K"/>.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:Light.Data.IAggregate`1.SelectInsert``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Select insert aggregate data to specified table
            </summary>
            <typeparam name="P"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.IAggregate`1.Take(System.Int32)">
            <summary>
            Set take datas count.
            </summary>
            <param name="count">Count.</param>
        </member>
        <member name="M:Light.Data.IAggregate`1.Skip(System.Int32)">
            <summary>
            Set from datas index.
            </summary>
            <returns>JoinTable.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:Light.Data.IAggregate`1.Range(System.Int32,System.Int32)">
            <summary>
            Set take datas range.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:Light.Data.IAggregate`1.RangeReset">
            <summary>
            Reset take datas range.
            </summary>
        </member>
        <member name="M:Light.Data.IAggregate`1.PageSize(System.Int32,System.Int32)">
            <summary>
            Sets page size.
            </summary>
            <param name="page">Page.</param>
            <param name="size">Size.</param>
        </member>
        <member name="M:Light.Data.IAggregate`1.SafeMode(Light.Data.SafeLevel)">
            <summary>
            Set the SafeLevel.
            </summary>
        </member>
        <member name="M:Light.Data.IAggregate`1.SetJoinSetting(Light.Data.JoinSetting)">
            <summary>
            Sets the join setting.
            </summary>
        </member>
        <member name="M:Light.Data.IAggregate`1.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.Join``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Inner Join table with query and onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Left Join table with query and onExpression.
            </summary>
            <returns>The join.</returns>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Right Join table with query and onExpression.
            </summary>
            <returns>The join.</returns>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.Join``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with query and onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with query and onExpression.
            </summary>
            <returns>The join.</returns>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with query and onExpression.
            </summary>
            <returns>The join.</returns>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IAggregate`1.ToListAsync(System.Threading.CancellationToken)">
            <summary>
            To the list.
            </summary>
            <returns>The list.</returns>
        </member>
        <member name="M:Light.Data.IAggregate`1.ToArrayAsync(System.Threading.CancellationToken)">
            <summary>
            To the array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:Light.Data.IAggregate`1.FirstAsync(System.Threading.CancellationToken)">
            <summary>
            Get first instance.
            </summary>
        </member>
        <member name="M:Light.Data.IAggregate`1.ElementAtAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Elements at index.
            </summary>
            <returns>The <see cref="!:K"/>.</returns>
            <param name="index">Index.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.IAggregate`1.SelectInsertAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Threading.CancellationToken)">
            <summary>
            Select insert aggregate data to specified table
            </summary>
            <typeparam name="P"></typeparam>
            <param name="expression"></param>
            <param name="cancellationToken">CancellationToken.</param>
            <returns></returns>
        </member>
        <member name="T:Light.Data.IQuery`1">
            <summary>
            Query.
            </summary>
        </member>
        <member name="M:Light.Data.IQuery`1.WhereReset">
            <summary>
            Reset the specified where expression
            </summary>
        </member>
        <member name="M:Light.Data.IQuery`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Set the specified where expression.
            </summary>T1,
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IQuery`1.WhereWithAnd(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Catch the specified where expression with and.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IQuery`1.WhereWithOr(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Catch the specified where expression with or.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IQuery`1.OrderByCatch``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Catch the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IQuery`1.OrderByDescendingCatch``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Catch the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IQuery`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Set the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Set the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.OrderByReset">
            <summary>
            Reset the specified order by expression.
            </summary>
        </member>
        <member name="M:Light.Data.IQuery`1.OrderByRandom">
            <summary>
            Set order by random.
            </summary>
            <returns>LEnumerable.</returns>
        </member>
        <member name="M:Light.Data.IQuery`1.Take(System.Int32)">
            <summary>
            Set take datas count.
            </summary>
            <param name="count">Count.</param>
        </member>
        <member name="M:Light.Data.IQuery`1.Skip(System.Int32)">
            <summary>
            Set from datas index.
            </summary>
            <returns>JoinTable.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:Light.Data.IQuery`1.Range(System.Int32,System.Int32)">
            <summary>
            Set take datas range.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:Light.Data.IQuery`1.RangeReset">
            <summary>
            Reset take datas range.
            </summary>
        </member>
        <member name="M:Light.Data.IQuery`1.PageSize(System.Int32,System.Int32)">
            <summary>
            Sets page size.
            </summary>
            <param name="page">Page.</param>
            <param name="size">Size.</param>
        </member>
        <member name="M:Light.Data.IQuery`1.SafeMode(Light.Data.SafeLevel)">
            <summary>
            Set the SafeLevel.
            </summary>
        </member>
        <member name="M:Light.Data.IQuery`1.SetDistinct(System.Boolean)">
            <summary>
            Sets the distinct.
            </summary>
        </member>
        <member name="M:Light.Data.IQuery`1.SetJoinSetting(Light.Data.JoinSetting)">
            <summary>
            Sets the join setting.
            </summary>
        </member>
        <member name="M:Light.Data.IQuery`1.Count">
            <summary>
            Gets the datas count.
            </summary>
        </member>
        <member name="M:Light.Data.IQuery`1.LongCount">
            <summary>
            Gets the datas long count.
            </summary>
        </member>
        <member name="M:Light.Data.IQuery`1.First">
            <summary>
            Get single instance.
            </summary>
            <returns>instance.</returns>
        </member>
        <member name="M:Light.Data.IQuery`1.ElementAt(System.Int32)">
            <summary>
            Elements at index.
            </summary>
            <returns>instance.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:Light.Data.IQuery`1.Exists">
            <summary>
            Gets the data is exists with query expression.
            </summary>
        </member>
        <member name="M:Light.Data.IQuery`1.ToList">
            <summary>
            To the list.
            </summary>
            <returns>The list.</returns>
        </member>
        <member name="M:Light.Data.IQuery`1.ToArray">
            <summary>
            To the array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:Light.Data.IQuery`1.Insert``1">
            <summary>
            All fields data insert to the special table K.
            </summary>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.SelectInsert``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Select fields data insert to the special table K.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.Update(System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            Update datas.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IQuery`1.Delete">
            <summary>
            Delete datas
            </summary>
        </member>
        <member name="M:Light.Data.IQuery`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Create Selector.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.Aggregate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Create group by aggregator
            </summary>
            <returns>The by.</returns>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.SelectField``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Select special field.
            </summary>
            <returns>The field.</returns>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.Join``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Inner Join table with query and onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Left Join table with query and onExpression.
            </summary>
            <returns>The join.</returns>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Right Join table with query and onExpression.
            </summary>
            <returns>The join.</returns>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.Join``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with query and onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with query and onExpression.
            </summary>
            <returns>The join.</returns>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with query and onExpression.
            </summary>
            <returns>The join.</returns>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.AggregateField``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Aggregates the fields.
            </summary>
            <returns>The field.</returns>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Light.Data.IQuery`1.LongCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas long count.
            </summary>
            <value>The long count.</value>
        </member>
        <member name="M:Light.Data.IQuery`1.ExistsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the data is exists with query expression.
            </summary>
            <value><c>true</c> if exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Light.Data.IQuery`1.FirstAsync(System.Threading.CancellationToken)">
            <summary>
            Get single instance.
            </summary>
            <returns>instance.</returns>
        </member>
        <member name="M:Light.Data.IQuery`1.ElementAtAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Elements at index.
            </summary>
            <returns>instance.</returns>
            <param name="index">Index.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.IQuery`1.ToListAsync(System.Threading.CancellationToken)">
            <summary>
            To the list.
            </summary>
            <returns>The list.</returns>
        </member>
        <member name="M:Light.Data.IQuery`1.ToArrayAsync(System.Threading.CancellationToken)">
            <summary>
            To the array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:Light.Data.IQuery`1.InsertAsync``1(System.Threading.CancellationToken)">
            <summary>
            All fields data insert to the special table K.
            </summary>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.SelectInsertAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Threading.CancellationToken)">
            <summary>
            Select fields data insert to the special table K.
            </summary>
            <param name="expression">Expression.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IQuery`1.UpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Threading.CancellationToken)">
            <summary>
            Update datas.
            </summary>
            <param name="expression">Expression.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.IQuery`1.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Delete datas
            </summary>
        </member>
        <member name="M:Light.Data.IQuery`1.AggregateFieldAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Threading.CancellationToken)">
            <summary>
            Aggregates the fields.
            </summary>
            <returns>The field.</returns>
            <param name="expression">Expression.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="T:Light.Data.ISelect`1">
            <summary>
            Select.
            </summary>
        </member>
        <member name="M:Light.Data.ISelect`1.ToList">
            <summary>
            Get data list.
            </summary>
            <returns>The list.</returns>
        </member>
        <member name="M:Light.Data.ISelect`1.ToArray">
            <summary>
            Get data array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:Light.Data.ISelect`1.First">
            <summary>
            Get first instance.
            </summary>
        </member>
        <member name="M:Light.Data.ISelect`1.ElementAt(System.Int32)">
            <summary>
            Elements at index.
            </summary>
            <returns>The <see cref="!:K"/>.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:Light.Data.ISelect`1.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.Join``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Inner Join table with query and onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Left Join table with query and onExpression.
            </summary>
            <returns>The join.</returns>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Right Join table with query and onExpression.
            </summary>
            <returns>The join.</returns>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.Join``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with query and onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with query and onExpression.
            </summary>
            <returns>The join.</returns>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with query and onExpression.
            </summary>
            <returns>The join.</returns>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
            <typeparam name="T1">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.ISelect`1.ToListAsync(System.Threading.CancellationToken)">
            <summary>
            Get data list.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:Light.Data.ISelect`1.ToArrayAsync(System.Threading.CancellationToken)">
            <summary>
            Get data array.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
            <returns>The array.</returns>
        </member>
        <member name="M:Light.Data.ISelect`1.FirstAsync(System.Threading.CancellationToken)">
            <summary>
            Get first instance.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.ISelect`1.ElementAtAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Elements at index.
            </summary>
            <returns>The <see cref="!:K"/>.</returns>
            <param name="index">Index.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="T:Light.Data.ISelectField`1">
            <summary>
            Select field.
            </summary>
        </member>
        <member name="M:Light.Data.ISelectField`1.ToList">
            <summary>
            To the list.
            </summary>
            <returns>The list.</returns>
        </member>
        <member name="M:Light.Data.ISelectField`1.ToArray">
            <summary>
            To the array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:Light.Data.ISelectField`1.First">
            <summary>
            Get first instance.
            </summary>
        </member>
        <member name="M:Light.Data.ISelectField`1.ElementAt(System.Int32)">
            <summary>
            Elements at index.
            </summary>
            <returns>The <see cref="!:K"/>.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:Light.Data.ISelectField`1.ToListAsync(System.Threading.CancellationToken)">
            <summary>
            To the list.
            </summary>
            <returns>The list.</returns>
        </member>
        <member name="M:Light.Data.ISelectField`1.ToArrayAsync(System.Threading.CancellationToken)">
            <summary>
            To the array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:Light.Data.ISelectField`1.FirstAsync(System.Threading.CancellationToken)">
            <summary>
            Get first instance.
            </summary>
        </member>
        <member name="M:Light.Data.ISelectField`1.ElementAtAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Elements at index.
            </summary>
            <returns>The <see cref="!:K"/>.</returns>
            <param name="index">Index.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="T:Light.Data.ISelectJoin`1">
            <summary>
            Join select.
            </summary>
        </member>
        <member name="M:Light.Data.ISelectJoin`1.ToList">
            <summary>
            To the list.
            </summary>
            <returns>The list.</returns>
        </member>
        <member name="M:Light.Data.ISelectJoin`1.ToArray">
            <summary>
            To the array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:Light.Data.ISelectJoin`1.First">
            <summary>
            Get first instance.
            </summary>
        </member>
        <member name="M:Light.Data.ISelectJoin`1.ElementAt(System.Int32)">
            <summary>
            Elements at index.
            </summary>
            <returns>The <see cref="!:K"/>.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:Light.Data.ISelectJoin`1.ToListAsync(System.Threading.CancellationToken)">
            <summary>
            To the list.
            </summary>
            <returns>The list.</returns>
        </member>
        <member name="M:Light.Data.ISelectJoin`1.ToArrayAsync(System.Threading.CancellationToken)">
            <summary>
            To the array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:Light.Data.ISelectJoin`1.FirstAsync(System.Threading.CancellationToken)">
            <summary>
            Get first instance.
            </summary>
        </member>
        <member name="M:Light.Data.ISelectJoin`1.ElementAtAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Elements at index.
            </summary>
            <returns>The <see cref="!:K"/>.</returns>
            <param name="index">Index.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="T:Light.Data.JoinSetting">
            <summary>
            The setting of join table.
            </summary>
        </member>
        <member name="F:Light.Data.JoinSetting.None">
            <summary>
            Nothing to setup
            </summary>
        </member>
        <member name="F:Light.Data.JoinSetting.QueryDistinct">
            <summary>
            Use distinct query
            </summary>
        </member>
        <member name="F:Light.Data.JoinSetting.NoDataSetEntityNull">
            <summary>
            When all fields are null, the object entity is set to null
            </summary>
        </member>
        <member name="T:Light.Data.JoinType">
            <summary>
            Join type.
            </summary>
        </member>
        <member name="F:Light.Data.JoinType.InnerJoin">
            <summary>
            The inner join.
            </summary>
        </member>
        <member name="F:Light.Data.JoinType.LeftJoin">
            <summary>
            The left join.
            </summary>
        </member>
        <member name="F:Light.Data.JoinType.RightJoin">
            <summary>
            The reght join.
            </summary>
        </member>
        <member name="T:Light.Data.LCollection`1">
            <summary>
            L collection.
            </summary>
        </member>
        <member name="M:Light.Data.LCollection`1.Add(`0)">
            <Docs>The item to add to the current collection.</Docs>
            <para>Adds an item to the current collection.</para>
            <remarks>To be added.</remarks>
            <exception cref="T:System.NotSupportedException">The current collection is read-only.</exception>
            <summary>
            Add the specified item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Light.Data.LCollection`1.Clear">
            <summary>
            Clear this instance.
            </summary>
        </member>
        <member name="M:Light.Data.LCollection`1.Contains(`0)">
            <Docs>The object to locate in the current collection.</Docs>
            <para>Determines whether the current collection contains a specific value.</para>
            <summary>
            Contains the specified item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="M:Light.Data.LCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">Array.</param>
            <param name="arrayIndex">Array index.</param>
        </member>
        <member name="M:Light.Data.LCollection`1.Remove(`0)">
            <Docs>The item to remove from the current collection.</Docs>
            <para>Removes the first occurrence of an item from the current collection.</para>
            <summary>
            Remove the specified item.
            </summary>
            <param name="item">Item.</param>
        </member>
        <member name="P:Light.Data.LCollection`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Light.Data.LCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Light.Data.LCollection`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:Light.Data.Region">
            <summary>
            Data region
            </summary>
        </member>
        <member name="M:Light.Data.Region.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="start">Start index,start from 0</param>
            <param name="size">Size</param>
        </member>
        <member name="P:Light.Data.Region.Start">
            <summary>
            Start index,start from 0
            </summary>
        </member>
        <member name="P:Light.Data.Region.Size">
            <summary>
            Size
            </summary>
        </member>
        <member name="M:Light.Data.Region.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Light.Data.SafeLevel">
            <summary>
            Safe level.
            </summary>
        </member>
        <member name="F:Light.Data.SafeLevel.Default">
            <summary>
            Use default transaction level.
            </summary>
        </member>
        <member name="F:Light.Data.SafeLevel.None">
            <summary>
            Not use transaction level.
            </summary>
        </member>
        <member name="F:Light.Data.SafeLevel.Low">
            <summary>
            Use ReadUncommitted transaction level.
            </summary>
        </member>
        <member name="F:Light.Data.SafeLevel.Normal">
            <summary>
            Use ReadCommitted transaction level.
            </summary>
        </member>
        <member name="F:Light.Data.SafeLevel.High">
            <summary>
            Use RepeatableRead transaction level.
            </summary>
        </member>
        <member name="F:Light.Data.SafeLevel.Serializable">
            <summary>
            Use Serializable transaction level.
            </summary>
        </member>
        <member name="T:Light.Data.IJoinTable`2">
            <summary>
            Join table.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`2.WhereReset">
            <summary>
            Reset the specified where expression
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`2.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
            Set the specified where expression.
            </summary>T1,
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.WhereWithAnd(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
            Catch the specified where expression with and.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.WhereWithOr(System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})">
            <summary>
            Catch the specified where expression with or.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.OrderByCatch``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            Catch the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.OrderByDescendingCatch``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            Catch the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            Set the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`2.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            Set the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`2.OrderByReset">
            <summary>
            Reset the specified order by expression.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`2.Take(System.Int32)">
            <summary>
            Set take datas count.
            </summary>
            <param name="count">Count.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.Skip(System.Int32)">
            <summary>
            Set from datas index.
            </summary>
            <returns>JoinTable.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.Range(System.Int32,System.Int32)">
            <summary>
            Set take datas range.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.RangeReset">
            <summary>
            Reset take datas range.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`2.PageSize(System.Int32,System.Int32)">
            <summary>
            Sets page size.
            </summary>
            <param name="page">Page.</param>
            <param name="size">Size.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.SafeMode(Light.Data.SafeLevel)">
            <summary>
            Set the SafeLevel.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`2.SetDistinct(System.Boolean)">
            <summary>
            Sets the distinct.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`2.Select``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            Create Selector.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`2.SelectInsert``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}})">
            <summary>
            Select fields data insert to the specified table K.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`2.Count">
            <summary>
            Gets the datas count.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`2.LongCount">
            <summary>
            Gets the datas long count.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`2.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.LongCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas long count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.SelectInsertAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}},System.Threading.CancellationToken)">
            <summary>
            Select fields data insert to the specified table K.
            </summary>
            <param name="expression">Expression.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`2.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.Join``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}})">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}})">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}})">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}})">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}})">
            <summary>
            Inner Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}})">
            <summary>
            Left Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}})">
            <summary>
            Right Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}})">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}})">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}})">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}})">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}})">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}})">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.Join``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`2.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="T:Light.Data.IJoinTable`3">
            <summary>
            Join table.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`3.WhereReset">
            <summary>
            Reset the specified where expression
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`3.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,System.Boolean}})">
            <summary>
            Set the specified where expression.
            </summary>T1,
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.WhereWithAnd(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,System.Boolean}})">
            <summary>
            Catch the specified where expression with and.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.WhereWithOr(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,System.Boolean}})">
            <summary>
            Catch the specified where expression with or.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.OrderByCatch``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            Catch the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.OrderByDescendingCatch``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            Catch the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            Set the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`3.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            Set the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`3.OrderByReset">
            <summary>
            Reset the specified order by expression.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`3.Take(System.Int32)">
            <summary>
            Set take datas count.
            </summary>
            <param name="count">Count.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.Skip(System.Int32)">
            <summary>
            Set from datas index.
            </summary>
            <returns>JoinTable.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.Range(System.Int32,System.Int32)">
            <summary>
            Set take datas range.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.RangeReset">
            <summary>
            Reset take datas range.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`3.PageSize(System.Int32,System.Int32)">
            <summary>
            Sets page size.
            </summary>
            <param name="page">Page.</param>
            <param name="size">Size.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.SafeMode(Light.Data.SafeLevel)">
            <summary>
            Set the SafeLevel.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`3.SetDistinct(System.Boolean)">
            <summary>
            Sets the distinct.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`3.Select``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            Create Selector.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`3.SelectInsert``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}})">
            <summary>
            Select fields data insert to the specified table K.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`3.Count">
            <summary>
            Gets the datas count.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`3.LongCount">
            <summary>
            Gets the datas long count.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`3.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.LongCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas long count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.SelectInsertAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}},System.Threading.CancellationToken)">
            <summary>
            Select fields data insert to the specified table K.
            </summary>
            <param name="expression">Expression.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`3.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.Join``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}})">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}})">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}})">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}})">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}})">
            <summary>
            Inner Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}})">
            <summary>
            Left Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}})">
            <summary>
            Right Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}})">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}})">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}})">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}})">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}})">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}})">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.Join``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`3.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="T:Light.Data.IJoinTable`4">
            <summary>
            Join table.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`4.WhereReset">
            <summary>
            Reset the specified where expression
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`4.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,System.Boolean}})">
            <summary>
            Set the specified where expression.
            </summary>T1,
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.WhereWithAnd(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,System.Boolean}})">
            <summary>
            Catch the specified where expression with and.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.WhereWithOr(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,System.Boolean}})">
            <summary>
            Catch the specified where expression with or.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.OrderByCatch``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            Catch the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.OrderByDescendingCatch``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            Catch the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            Set the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`4.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            Set the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`4.OrderByReset">
            <summary>
            Reset the specified order by expression.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`4.Take(System.Int32)">
            <summary>
            Set take datas count.
            </summary>
            <param name="count">Count.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.Skip(System.Int32)">
            <summary>
            Set from datas index.
            </summary>
            <returns>JoinTable.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.Range(System.Int32,System.Int32)">
            <summary>
            Set take datas range.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.RangeReset">
            <summary>
            Reset take datas range.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`4.PageSize(System.Int32,System.Int32)">
            <summary>
            Sets page size.
            </summary>
            <param name="page">Page.</param>
            <param name="size">Size.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.SafeMode(Light.Data.SafeLevel)">
            <summary>
            Set the SafeLevel.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`4.SetDistinct(System.Boolean)">
            <summary>
            Sets the distinct.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`4.Select``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            Create Selector.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`4.SelectInsert``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}})">
            <summary>
            Select fields data insert to the specified table K.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`4.Count">
            <summary>
            Gets the datas count.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`4.LongCount">
            <summary>
            Gets the datas long count.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`4.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.LongCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas long count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.SelectInsertAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}},System.Threading.CancellationToken)">
            <summary>
            Select fields data insert to the specified table K.
            </summary>
            <param name="expression">Expression.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`4.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.Join``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}})">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}})">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}})">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}})">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}})">
            <summary>
            Inner Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}})">
            <summary>
            Left Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}})">
            <summary>
            Right Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}})">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}})">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}})">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}})">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}})">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}})">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.Join``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`4.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="T:Light.Data.IJoinTable`5">
            <summary>
            Join table.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`5.WhereReset">
            <summary>
            Reset the specified where expression
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`5.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,System.Boolean}})">
            <summary>
            Set the specified where expression.
            </summary>T1,
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.WhereWithAnd(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,System.Boolean}})">
            <summary>
            Catch the specified where expression with and.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.WhereWithOr(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,System.Boolean}})">
            <summary>
            Catch the specified where expression with or.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.OrderByCatch``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            Catch the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.OrderByDescendingCatch``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            Catch the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            Set the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`5.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            Set the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`5.OrderByReset">
            <summary>
            Reset the specified order by expression.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`5.Take(System.Int32)">
            <summary>
            Set take datas count.
            </summary>
            <param name="count">Count.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.Skip(System.Int32)">
            <summary>
            Set from datas index.
            </summary>
            <returns>JoinTable.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.Range(System.Int32,System.Int32)">
            <summary>
            Set take datas range.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.RangeReset">
            <summary>
            Reset take datas range.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`5.PageSize(System.Int32,System.Int32)">
            <summary>
            Sets page size.
            </summary>
            <param name="page">Page.</param>
            <param name="size">Size.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.SafeMode(Light.Data.SafeLevel)">
            <summary>
            Set the SafeLevel.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`5.SetDistinct(System.Boolean)">
            <summary>
            Sets the distinct.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`5.Select``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            Create Selector.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`5.SelectInsert``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}})">
            <summary>
            Select fields data insert to the specified table K.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`5.Count">
            <summary>
            Gets the datas count.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`5.LongCount">
            <summary>
            Gets the datas long count.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`5.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.LongCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas long count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.SelectInsertAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}},System.Threading.CancellationToken)">
            <summary>
            Select fields data insert to the specified table K.
            </summary>
            <param name="expression">Expression.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`5.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.Join``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}})">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}})">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}})">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}})">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}})">
            <summary>
            Inner Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}})">
            <summary>
            Left Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}})">
            <summary>
            Right Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}})">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}})">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}})">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}})">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}})">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}})">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.Join``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`5.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="T:Light.Data.IJoinTable`6">
            <summary>
            Join table.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`6.WhereReset">
            <summary>
            Reset the specified where expression
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`6.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,System.Boolean}})">
            <summary>
            Set the specified where expression.
            </summary>T1,
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.WhereWithAnd(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,System.Boolean}})">
            <summary>
            Catch the specified where expression with and.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.WhereWithOr(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,System.Boolean}})">
            <summary>
            Catch the specified where expression with or.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.OrderByCatch``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            Catch the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.OrderByDescendingCatch``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            Catch the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            Set the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`6.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            Set the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`6.OrderByReset">
            <summary>
            Reset the specified order by expression.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`6.Take(System.Int32)">
            <summary>
            Set take datas count.
            </summary>
            <param name="count">Count.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.Skip(System.Int32)">
            <summary>
            Set from datas index.
            </summary>
            <returns>JoinTable.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.Range(System.Int32,System.Int32)">
            <summary>
            Set take datas range.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.RangeReset">
            <summary>
            Reset take datas range.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`6.PageSize(System.Int32,System.Int32)">
            <summary>
            Sets page size.
            </summary>
            <param name="page">Page.</param>
            <param name="size">Size.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.SafeMode(Light.Data.SafeLevel)">
            <summary>
            Set the SafeLevel.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`6.SetDistinct(System.Boolean)">
            <summary>
            Sets the distinct.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`6.Select``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            Create Selector.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`6.SelectInsert``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}})">
            <summary>
            Select fields data insert to the specified table K.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`6.Count">
            <summary>
            Gets the datas count.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`6.LongCount">
            <summary>
            Gets the datas long count.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`6.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.LongCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas long count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.SelectInsertAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}},System.Threading.CancellationToken)">
            <summary>
            Select fields data insert to the specified table K.
            </summary>
            <param name="expression">Expression.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`6.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.Join``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}})">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}})">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}})">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}})">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}})">
            <summary>
            Inner Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}})">
            <summary>
            Left Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}})">
            <summary>
            Right Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}})">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}})">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}})">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}})">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}})">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}})">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.Join``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`6.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="T:Light.Data.IJoinTable`7">
            <summary>
            Join table.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`7.WhereReset">
            <summary>
            Reset the specified where expression
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`7.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,System.Boolean}})">
            <summary>
            Set the specified where expression.
            </summary>T1,
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.WhereWithAnd(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,System.Boolean}})">
            <summary>
            Catch the specified where expression with and.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.WhereWithOr(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,System.Boolean}})">
            <summary>
            Catch the specified where expression with or.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.OrderByCatch``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0}})">
            <summary>
            Catch the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.OrderByDescendingCatch``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0}})">
            <summary>
            Catch the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0}})">
            <summary>
            Set the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`7.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0}})">
            <summary>
            Set the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`7.OrderByReset">
            <summary>
            Reset the specified order by expression.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`7.Take(System.Int32)">
            <summary>
            Set take datas count.
            </summary>
            <param name="count">Count.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.Skip(System.Int32)">
            <summary>
            Set from datas index.
            </summary>
            <returns>JoinTable.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.Range(System.Int32,System.Int32)">
            <summary>
            Set take datas range.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.RangeReset">
            <summary>
            Reset take datas range.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`7.PageSize(System.Int32,System.Int32)">
            <summary>
            Sets page size.
            </summary>
            <param name="page">Page.</param>
            <param name="size">Size.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.SafeMode(Light.Data.SafeLevel)">
            <summary>
            Set the SafeLevel.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`7.SetDistinct(System.Boolean)">
            <summary>
            Sets the distinct.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`7.Select``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0}})">
            <summary>
            Create Selector.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`7.SelectInsert``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0}})">
            <summary>
            Select fields data insert to the specified table K.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`7.Count">
            <summary>
            Gets the datas count.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`7.LongCount">
            <summary>
            Gets the datas long count.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`7.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.LongCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas long count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.SelectInsertAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0}},System.Threading.CancellationToken)">
            <summary>
            Select fields data insert to the specified table K.
            </summary>
            <param name="expression">Expression.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`7.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.Join``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}})">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}})">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}})">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}})">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}})">
            <summary>
            Inner Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}})">
            <summary>
            Left Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}})">
            <summary>
            Right Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}})">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}})">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}})">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}})">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}})">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}})">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.Join``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`7.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="T:Light.Data.IJoinTable`8">
            <summary>
            Join table.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`8.WhereReset">
            <summary>
            Reset the specified where expression
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`8.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,System.Boolean}})">
            <summary>
            Set the specified where expression.
            </summary>T1,
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.WhereWithAnd(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,System.Boolean}})">
            <summary>
            Catch the specified where expression with and.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.WhereWithOr(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,System.Boolean}})">
            <summary>
            Catch the specified where expression with or.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.OrderByCatch``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0}})">
            <summary>
            Catch the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.OrderByDescendingCatch``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0}})">
            <summary>
            Catch the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0}})">
            <summary>
            Set the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`8.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0}})">
            <summary>
            Set the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`8.OrderByReset">
            <summary>
            Reset the specified order by expression.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`8.Take(System.Int32)">
            <summary>
            Set take datas count.
            </summary>
            <param name="count">Count.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.Skip(System.Int32)">
            <summary>
            Set from datas index.
            </summary>
            <returns>JoinTable.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.Range(System.Int32,System.Int32)">
            <summary>
            Set take datas range.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.RangeReset">
            <summary>
            Reset take datas range.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`8.PageSize(System.Int32,System.Int32)">
            <summary>
            Sets page size.
            </summary>
            <param name="page">Page.</param>
            <param name="size">Size.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.SafeMode(Light.Data.SafeLevel)">
            <summary>
            Set the SafeLevel.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`8.SetDistinct(System.Boolean)">
            <summary>
            Sets the distinct.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`8.Select``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0}})">
            <summary>
            Create Selector.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`8.SelectInsert``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0}})">
            <summary>
            Select fields data insert to the specified table K.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`8.Count">
            <summary>
            Gets the datas count.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`8.LongCount">
            <summary>
            Gets the datas long count.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`8.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.LongCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas long count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.SelectInsertAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0}},System.Threading.CancellationToken)">
            <summary>
            Select fields data insert to the specified table K.
            </summary>
            <param name="expression">Expression.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`8.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.Join``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}})">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}})">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}})">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}})">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}})">
            <summary>
            Inner Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}})">
            <summary>
            Left Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}})">
            <summary>
            Right Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}})">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}})">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}})">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}})">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}})">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}})">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.Join``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`8.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="T:Light.Data.IJoinTable`9">
            <summary>
            Join table.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`9.WhereReset">
            <summary>
            Reset the specified where expression
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`9.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,System.Boolean}})">
            <summary>
            Set the specified where expression.
            </summary>T1,
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.WhereWithAnd(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,System.Boolean}})">
            <summary>
            Catch the specified where expression with and.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.WhereWithOr(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,System.Boolean}})">
            <summary>
            Catch the specified where expression with or.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.OrderByCatch``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0}})">
            <summary>
            Catch the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.OrderByDescendingCatch``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0}})">
            <summary>
            Catch the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0}})">
            <summary>
            Set the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`9.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0}})">
            <summary>
            Set the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`9.OrderByReset">
            <summary>
            Reset the specified order by expression.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`9.Take(System.Int32)">
            <summary>
            Set take datas count.
            </summary>
            <param name="count">Count.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.Skip(System.Int32)">
            <summary>
            Set from datas index.
            </summary>
            <returns>JoinTable.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.Range(System.Int32,System.Int32)">
            <summary>
            Set take datas range.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.RangeReset">
            <summary>
            Reset take datas range.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`9.PageSize(System.Int32,System.Int32)">
            <summary>
            Sets page size.
            </summary>
            <param name="page">Page.</param>
            <param name="size">Size.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.SafeMode(Light.Data.SafeLevel)">
            <summary>
            Set the SafeLevel.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`9.SetDistinct(System.Boolean)">
            <summary>
            Sets the distinct.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`9.Select``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0}})">
            <summary>
            Create Selector.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`9.SelectInsert``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0}})">
            <summary>
            Select fields data insert to the specified table K.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`9.Count">
            <summary>
            Gets the datas count.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`9.LongCount">
            <summary>
            Gets the datas long count.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`9.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.LongCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas long count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.SelectInsertAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0}},System.Threading.CancellationToken)">
            <summary>
            Select fields data insert to the specified table K.
            </summary>
            <param name="expression">Expression.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`9.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.Join``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}})">
            <summary>
            Inner Join table with specified specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}})">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}})">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}})">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}})">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}})">
            <summary>
            Inner Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}})">
            <summary>
            Left Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}})">
            <summary>
            Right Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}})">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}})">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}})">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}})">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}})">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}})">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.Join``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.Join``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join table with specified specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.LeftJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.RightJoin``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified queryExpression and onExpression.
            </summary>
            <param name="queryExpression">Query expression.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.RightJoin``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join table with specified onExpression.
            </summary>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.Join``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.LeftJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.RightJoin``1(Light.Data.IQuery{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join query data with onExpression.
            </summary>
            <param name="query">Query.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.Join``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.LeftJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.RightJoin``1(Light.Data.IAggregate{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join aggregate data with onExpression.
            </summary>
            <param name="aggregate">Aggregate.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.Join``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Inner Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.LeftJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Left Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`9.RightJoin``1(Light.Data.ISelect{``0},System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0,System.Boolean}},Light.Data.JoinSetting)">
            <summary>
            Right Join select data with onExpression.
            </summary>
            <param name="select">Select.</param>
            <param name="onExpression">On expression.</param>
            <param name="joinSetting">The setting of join table.</param>
        </member>
        <member name="T:Light.Data.IJoinTable`10">
            <summary>
            Join table.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`10.WhereReset">
            <summary>
            Reset the specified where expression
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`10.Where(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,System.Boolean}})">
            <summary>
            Set the specified where expression.
            </summary>T1,
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`10.WhereWithAnd(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,System.Boolean}})">
            <summary>
            Catch the specified where expression with and.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`10.WhereWithOr(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,System.Boolean}})">
            <summary>
            Catch the specified where expression with or.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`10.OrderByCatch``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,``0}})">
            <summary>
            Catch the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`10.OrderByDescendingCatch``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,``0}})">
            <summary>
            Catch the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`10.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,``0}})">
            <summary>
            Set the specified asc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`10.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,``0}})">
            <summary>
            Set the specified desc order by expression.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="TKey">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`10.OrderByReset">
            <summary>
            Reset the specified order by expression.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`10.Take(System.Int32)">
            <summary>
            Set take datas count.
            </summary>
            <param name="count">Count.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`10.Skip(System.Int32)">
            <summary>
            Set from datas index.
            </summary>
            <returns>JoinTable.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`10.Range(System.Int32,System.Int32)">
            <summary>
            Set take datas range.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`10.RangeReset">
            <summary>
            Reset take datas range.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`10.PageSize(System.Int32,System.Int32)">
            <summary>
            Sets page size.
            </summary>
            <param name="page">Page.</param>
            <param name="size">Size.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`10.SafeMode(Light.Data.SafeLevel)">
            <summary>
            Set the SafeLevel.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`10.SetDistinct(System.Boolean)">
            <summary>
            Sets the distinct.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`10.Select``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,``0}})">
            <summary>
            Create Selector.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`10.SelectInsert``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,``0}})">
            <summary>
            Select fields data insert to the specified table K.
            </summary>
            <param name="expression">Expression.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="M:Light.Data.IJoinTable`10.Count">
            <summary>
            Gets the datas count.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`10.LongCount">
            <summary>
            Gets the datas long count.
            </summary>
        </member>
        <member name="M:Light.Data.IJoinTable`10.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`10.LongCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas long count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.IJoinTable`10.SelectInsertAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,``0}},System.Threading.CancellationToken)">
            <summary>
            Select fields data insert to the specified table K.
            </summary>
            <param name="expression">Expression.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <typeparam name="K">Data type.</typeparam>
        </member>
        <member name="T:Light.Data.LightJoinTable`2">
            <summary>
            Join table.
            </summary>		
        </member>
        <member name="M:Light.Data.LightJoinTable`2.Count">
            <summary>
            Gets the datas count.
            </summary>
        </member>
        <member name="M:Light.Data.LightJoinTable`2.LongCount">
            <summary>
            Gets the datas long count.
            </summary>
        </member>
        <member name="M:Light.Data.LightJoinTable`2.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.LightJoinTable`2.LongCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas long count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.LightJoinTable`2.SelectInsertAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,``0}},System.Threading.CancellationToken)">
            <summary>
            Insert the select data to the special table K.
            </summary>
            <param name="expression">Expression.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="T:Light.Data.LightJoinTable`3">
            <summary>
            Join table.
            </summary>		
        </member>
        <member name="M:Light.Data.LightJoinTable`3.Count">
            <summary>
            Gets the datas count.
            </summary>
        </member>
        <member name="M:Light.Data.LightJoinTable`3.LongCount">
            <summary>
            Gets the datas long count.
            </summary>
        </member>
        <member name="M:Light.Data.LightJoinTable`3.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.LightJoinTable`3.LongCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas long count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.LightJoinTable`3.SelectInsertAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,``0}},System.Threading.CancellationToken)">
            <summary>
            Insert the select data to the special table K.
            </summary>
            <param name="expression">Expression.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="T:Light.Data.LightJoinTable`4">
            <summary>
            Join table.
            </summary>		
        </member>
        <member name="M:Light.Data.LightJoinTable`4.Count">
            <summary>
            Gets the datas count.
            </summary>
        </member>
        <member name="M:Light.Data.LightJoinTable`4.LongCount">
            <summary>
            Gets the datas long count.
            </summary>
        </member>
        <member name="M:Light.Data.LightJoinTable`4.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.LightJoinTable`4.LongCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas long count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.LightJoinTable`4.SelectInsertAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,``0}},System.Threading.CancellationToken)">
            <summary>
            Insert the select data to the special table K.
            </summary>
            <param name="expression">Expression.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="T:Light.Data.LightJoinTable`5">
            <summary>
            Join table.
            </summary>		
        </member>
        <member name="M:Light.Data.LightJoinTable`5.Count">
            <summary>
            Gets the datas count.
            </summary>
        </member>
        <member name="M:Light.Data.LightJoinTable`5.LongCount">
            <summary>
            Gets the datas long count.
            </summary>
        </member>
        <member name="M:Light.Data.LightJoinTable`5.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.LightJoinTable`5.LongCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas long count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.LightJoinTable`5.SelectInsertAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,``0}},System.Threading.CancellationToken)">
            <summary>
            Insert the select data to the special table K.
            </summary>
            <param name="expression">Expression.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="T:Light.Data.LightJoinTable`6">
            <summary>
            Join table.
            </summary>		
        </member>
        <member name="M:Light.Data.LightJoinTable`6.Count">
            <summary>
            Gets the datas count.
            </summary>
        </member>
        <member name="M:Light.Data.LightJoinTable`6.LongCount">
            <summary>
            Gets the datas long count.
            </summary>
        </member>
        <member name="M:Light.Data.LightJoinTable`6.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.LightJoinTable`6.LongCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas long count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.LightJoinTable`6.SelectInsertAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,``0}},System.Threading.CancellationToken)">
            <summary>
            Insert the select data to the special table K.
            </summary>
            <param name="expression">Expression.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="T:Light.Data.LightJoinTable`7">
            <summary>
            Join table.
            </summary>		
        </member>
        <member name="M:Light.Data.LightJoinTable`7.Count">
            <summary>
            Gets the datas count.
            </summary>
        </member>
        <member name="M:Light.Data.LightJoinTable`7.LongCount">
            <summary>
            Gets the datas long count.
            </summary>
        </member>
        <member name="M:Light.Data.LightJoinTable`7.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.LightJoinTable`7.LongCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas long count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.LightJoinTable`7.SelectInsertAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,``0}},System.Threading.CancellationToken)">
            <summary>
            Insert the select data to the special table K.
            </summary>
            <param name="expression">Expression.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="T:Light.Data.LightJoinTable`8">
            <summary>
            Join table.
            </summary>		
        </member>
        <member name="M:Light.Data.LightJoinTable`8.Count">
            <summary>
            Gets the datas count.
            </summary>
        </member>
        <member name="M:Light.Data.LightJoinTable`8.LongCount">
            <summary>
            Gets the datas long count.
            </summary>
        </member>
        <member name="M:Light.Data.LightJoinTable`8.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.LightJoinTable`8.LongCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas long count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.LightJoinTable`8.SelectInsertAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0}},System.Threading.CancellationToken)">
            <summary>
            Insert the select data to the special table K.
            </summary>
            <param name="expression">Expression.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="T:Light.Data.LightJoinTable`9">
            <summary>
            Join table.
            </summary>		
        </member>
        <member name="M:Light.Data.LightJoinTable`9.Count">
            <summary>
            Gets the datas count.
            </summary>
        </member>
        <member name="M:Light.Data.LightJoinTable`9.LongCount">
            <summary>
            Gets the datas long count.
            </summary>
        </member>
        <member name="M:Light.Data.LightJoinTable`9.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.LightJoinTable`9.LongCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas long count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.LightJoinTable`9.SelectInsertAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0}},System.Threading.CancellationToken)">
            <summary>
            Insert the select data to the special table K.
            </summary>
            <param name="expression">Expression.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="T:Light.Data.LightJoinTable`10">
            <summary>
            Join table.
            </summary>		
        </member>
        <member name="M:Light.Data.LightJoinTable`10.Count">
            <summary>
            Gets the datas count.
            </summary>
        </member>
        <member name="M:Light.Data.LightJoinTable`10.LongCount">
            <summary>
            Gets the datas long count.
            </summary>
        </member>
        <member name="M:Light.Data.LightJoinTable`10.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.LightJoinTable`10.LongCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the datas long count.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="M:Light.Data.LightJoinTable`10.SelectInsertAsync``1(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,``0}},System.Threading.CancellationToken)">
            <summary>
            Insert the select data to the special table K.
            </summary>
            <param name="expression">Expression.</param>
            <param name="cancellationToken">CancellationToken.</param>
        </member>
        <member name="T:Light.Data.LightSelectJoin`3">
            <summary>
            Join table.
            </summary>		
        </member>
        <member name="T:Light.Data.LightSelectJoin`4">
            <summary>
            Join table.
            </summary>		
        </member>
        <member name="T:Light.Data.LightSelectJoin`5">
            <summary>
            Join table.
            </summary>		
        </member>
        <member name="T:Light.Data.LightSelectJoin`6">
            <summary>
            Join table.
            </summary>		
        </member>
        <member name="T:Light.Data.LightSelectJoin`7">
            <summary>
            Join table.
            </summary>		
        </member>
        <member name="T:Light.Data.LightSelectJoin`8">
            <summary>
            Join table.
            </summary>		
        </member>
        <member name="T:Light.Data.LightSelectJoin`9">
            <summary>
            Join table.
            </summary>		
        </member>
        <member name="T:Light.Data.LightSelectJoin`10">
            <summary>
            Join table.
            </summary>		
        </member>
        <member name="T:Light.Data.LightSelectJoin`11">
            <summary>
            Join table.
            </summary>		
        </member>
        <member name="T:Light.Data.SqlExecutor">
            <summary>
            SqlString executor.
            </summary>
        </member>
        <member name="P:Light.Data.SqlExecutor.CommandTimeOut">
            <summary>
            Gets or sets the command time out.
            </summary>
            <value>The command time out.</value>
        </member>
        <member name="M:Light.Data.SqlExecutor.#ctor(System.String,Light.Data.DataParameter[],System.Data.CommandType,Light.Data.SafeLevel,Light.Data.DataContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.SqlExecutor"/> class.
            </summary>
            <param name="sql">Sql.</param>
            <param name="parameters">Parameters.</param>
            <param name="commandType">Command type.</param>
            <param name="level">Level.</param>
            <param name="context">Context.</param>
        </member>
        <member name="M:Light.Data.SqlExecutor.ExecuteNonQuery">
            <summary>
            Executes the non query.
            </summary>
            <returns>The affected rows.</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.ExecuteScalar">
            <summary>
            Executes the scalar.
            </summary>
            <returns>The execute result.</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.QueryFirst``1">
            <summary>
            Query and return first data
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <returns>First data</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.QueryList``1(Light.Data.Region)">
            <summary>
            Query and return data list
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <param name="region">Query region</param>
            <returns>Data list</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.QueryList``1">
            <summary>
            Query and return data list
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <returns>Data list</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.QueryList``1(System.Int32,System.Int32)">
            <summary>
            Query and return data list
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <param name="start">Start.</param>
            <param name="size">Size.</param>
            <returns>Data list</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.Query``1(System.Int32,System.Int32)">
            <summary>
            Query the specified start and size.
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <param name="start">Start index. start from 0</param>
            <param name="size">Size.</param>
        </member>
        <member name="M:Light.Data.SqlExecutor.Query``1(Light.Data.Region)">
            <summary>
            Query and return data enumerable
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <param name="region">Data region</param>
            <returns>Data enumerable</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.Query``1">
            <summary>
            Query and return data enumerable
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <returns>Data enumerable</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.QueryDataSet">
            <summary>
            Query and return dataset
            </summary>
            <returns>DataSet</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the non query.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
            <returns>The affected rows.</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.ExecuteScalarAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="cancellationToken">CancellationToken.</param>
            <returns>The execute result.</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.QueryFirstAsync``1(System.Threading.CancellationToken)">
            <summary>
            Query and return first data
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <param name="cancellationToken">CancellationToken.</param>
            <returns>First data</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.QueryListAsync``1(Light.Data.Region,System.Threading.CancellationToken)">
            <summary>
            Query and return data list
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <param name="region">Query region</param>
            <param name="cancellationToken">CancellationToken.</param>
            <returns>Data list</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.QueryListAsync``1(System.Threading.CancellationToken)">
            <summary>
            Query and return data list
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <param name="cancellationToken">CancellationToken.</param>
            <returns>Data list</returns>
        </member>
        <member name="M:Light.Data.SqlExecutor.QueryListAsync``1(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Query the specified start and size.
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <param name="start">Start index. start from 0</param>
            <param name="size">Size.</param>
            <param name="cancellationToken">CancellationToken.</param>
            <returns>Data list</returns>
        </member>
        <member name="T:Light.Data.SR">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Light.Data.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Light.Data.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Light.Data.SR.CanNotFindAliasNameViaSpecifiedPath">
            <summary>
              Looks up a localized string similar to Can not find alias name via specified path &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Light.Data.SR.CanNotFindTheSpecifiedField">
            <summary>
              Looks up a localized string similar to Can not find the specified field &apos;{0}&apos; in type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Light.Data.SR.CanNotFindTheSpecifiedFieldViaPath">
            <summary>
              Looks up a localized string similar to Can not find specified field via path &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Light.Data.SR.ConfigDataFieldIsNotExists">
            <summary>
              Looks up a localized string similar to Config data type &apos;{0}&apos; field &apos;{1} is not exists.
            </summary>
        </member>
        <member name="P:Light.Data.SR.ConfigDataFieldLoadError">
            <summary>
              Looks up a localized string similar to Config data type &apos;{0}&apos; field &apos;{1}&apos; value load error,reason:{2}.
            </summary>
        </member>
        <member name="P:Light.Data.SR.ConfigDataFieldNameIsNull">
            <summary>
              Looks up a localized string similar to Config data type &apos;{0}&apos; field &apos;{1}&apos; name is null.
            </summary>
        </member>
        <member name="P:Light.Data.SR.ConfigDataTypeNameIsNull">
            <summary>
              Looks up a localized string similar to Config data type &apos;{0}&apos; name is null.
            </summary>
        </member>
        <member name="P:Light.Data.SR.ConfigurationHasBeenInitialized">
            <summary>
              Looks up a localized string similar to The configuration has been initialized.
            </summary>
        </member>
        <member name="P:Light.Data.SR.DataContextIsNotExists">
            <summary>
              Looks up a localized string similar to DataContext is not exists.
            </summary>
        </member>
        <member name="P:Light.Data.SR.DataContextOptionsError">
            <summary>
              Looks up a localized string similar to The options of context error.
            </summary>
        </member>
        <member name="P:Light.Data.SR.DataDefineUnsupportFieldType">
            <summary>
              Looks up a localized string similar to The define error,unsupport field type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Light.Data.SR.DataFieldContentError">
            <summary>
              Looks up a localized string similar to Data field content error.
            </summary>
        </member>
        <member name="P:Light.Data.SR.DataMappingUnsupportFieldType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; field &apos;{1}&apos; error,unsupport field type &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Light.Data.SR.DataMappingUnsupportIdentityFieldType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; field &apos;{1}&apos; error,unsupport identity field type &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Light.Data.SR.DefaultConfigNotExists">
            <summary>
              Looks up a localized string similar to The default config is not exists.
            </summary>
        </member>
        <member name="P:Light.Data.SR.EnumDefaultValueType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; enum field &apos;{1}&apos; default value &apos;{2}&apos; error.
            </summary>
        </member>
        <member name="P:Light.Data.SR.FieldNameIsInvalid">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; field &apos;{1}&apos; name is invalid.
            </summary>
        </member>
        <member name="P:Light.Data.SR.FunctionControlError">
            <summary>
              Looks up a localized string similar to FunctionControl error.
            </summary>
        </member>
        <member name="P:Light.Data.SR.IsNotDataTableMapping">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not data table mapping.
            </summary>
        </member>
        <member name="P:Light.Data.SR.KeyNotAllowNull">
            <summary>
              Looks up a localized string similar to The Id or Key does not allow null.
            </summary>
        </member>
        <member name="P:Light.Data.SR.MultipleIdentityField">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; has multiple identity fields.
            </summary>
        </member>
        <member name="P:Light.Data.SR.NoDataEntityConfig">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; no data entity config.
            </summary>
        </member>
        <member name="P:Light.Data.SR.NoIdentityField">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; no identity field.
            </summary>
        </member>
        <member name="P:Light.Data.SR.NoMappingField">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not have a mapping field.
            </summary>
        </member>
        <member name="P:Light.Data.SR.NotContainNonIdentityKeyFields">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not contain non-identity key fields.
            </summary>
        </member>
        <member name="P:Light.Data.SR.NotContainNonPrimaryKeyFields">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not contain non-primary key fields.
            </summary>
        </member>
        <member name="P:Light.Data.SR.NotContainPrimaryKeyFields">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not contain primary key fields.
            </summary>
        </member>
        <member name="P:Light.Data.SR.NotFunctionControlType">
            <summary>
              Looks up a localized string similar to Not &quot;FunctionControl&quot; type.
            </summary>
        </member>
        <member name="P:Light.Data.SR.NotMatchPrimaryKeyField">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; primary keys is not match.
            </summary>
        </member>
        <member name="P:Light.Data.SR.OutputParameterNotSupportObjectType">
            <summary>
              Looks up a localized string similar to The output parameter not support object type.
            </summary>
        </member>
        <member name="P:Light.Data.SR.ParseExpressionError">
            <summary>
              Looks up a localized string similar to Parse &apos;{0}&apos; expression &apos;{1}&apos; error,message:{2}.
            </summary>
        </member>
        <member name="P:Light.Data.SR.PrimaryKeyDataNotExists">
            <summary>
              Looks up a localized string similar to Specific primary key data does not exists.
            </summary>
        </member>
        <member name="P:Light.Data.SR.RelationFieldError">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; relation field &apos;{1}&apos; error.
            </summary>
        </member>
        <member name="P:Light.Data.SR.RelationFieldKeyNotMatch">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; relation field &apos;{1}&apos; key not match.
            </summary>
        </member>
        <member name="P:Light.Data.SR.SelectFieldsCountNotEquidInsertFieldCount">
            <summary>
              Looks up a localized string similar to The select fields count not equid the insert field count.
            </summary>
        </member>
        <member name="P:Light.Data.SR.SpecifiedConfigNotExists">
            <summary>
              Looks up a localized string similar to The specified config &apos;{0}&apos; is not exists.
            </summary>
        </member>
        <member name="P:Light.Data.SR.TransactionHasBegun">
            <summary>
              Looks up a localized string similar to The transaction has begun.
            </summary>
        </member>
        <member name="P:Light.Data.SR.TransactionHasClosed">
            <summary>
              Looks up a localized string similar to The transaction has closed.
            </summary>
        </member>
        <member name="P:Light.Data.SR.TransactionNotBegin">
            <summary>
              Looks up a localized string similar to The transaction not begin.
            </summary>
        </member>
        <member name="P:Light.Data.SR.TypeIsNotDatabaseType">
            <summary>
              Looks up a localized string similar to The type {0} is not database type.
            </summary>
        </member>
        <member name="P:Light.Data.SR.UnsupportPredicate">
            <summary>
              Looks up a localized string similar to Unsupport predicate &apos;{0}&apos; in &apos;{1}&apos; field expression.
            </summary>
        </member>
        <member name="P:Light.Data.SR.UpdateFieldIsPrimaryKeyField">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; update field &apos;{1}&apos; is primary key.
            </summary>
        </member>
        <member name="T:Light.Data.TextFormatter">
            <summary>
            Custom text template parameter name, parameter name '{name}' format, such as '{param1}', parameter name only allow case of English and Numbers and '_' number, parameter names corresponding object properties, such as to be in the text printed '{}' or ' 'no, two successive input as an escape, as "{{", if you want to specify the parameter value is not empty, need to put a '+' before the parameter name
            </summary>
        </member>
        <member name="M:Light.Data.TextFormatter.Format(System.String,System.Object)">
            <summary>
            Format
            </summary>
            <param name="pattern"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.TextFormatter.Format(System.String,System.Object,Light.Data.TextTemplateOptions)">
            <summary>
            Format
            </summary>
            <param name="pattern"></param>
            <param name="obj"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.TextFormatter.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="M:Light.Data.TextFormatter.#ctor(System.String,Light.Data.TextTemplateOptions)">
            <summary>
            
            </summary>
            <param name="pattern"></param>
            <param name="options"></param>
        </member>
        <member name="M:Light.Data.TextFormatter.Format(System.Object)">
            <summary>
            Format
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.TextFormatter.Format(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Format string
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:Light.Data.TextFormatter.FormatSql(System.Object,System.String,Light.Data.DataParameter[]@)">
            <summary>
            Formar sql string
            </summary>
            <param name="obj"></param>
            <param name="prefix"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Light.Data.TextTemplateOptions">
            <summary>
            Text template options
            </summary>
        </member>
        <member name="F:Light.Data.TextTemplateOptions.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Light.Data.TextTemplateOptions.Compiled">
            <summary>
            Compile template
            </summary>
        </member>
        <member name="F:Light.Data.TextTemplateOptions.NotAllowNullValue">
            <summary>
            Not allow null value
            </summary>
        </member>
        <member name="F:Light.Data.TextTemplateOptions.NotAllowExtend">
            <summary>
            Not allow extend format
            </summary>
        </member>
        <member name="M:Light.Data.TransactionConnection.#ctor(System.Data.Common.DbConnection,Light.Data.SafeLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.TransactionConnection"/> class.
            </summary>
            <param name="connection">Connection.</param>
            <param name="level">Level.</param>
        </member>
        <member name="M:Light.Data.TransactionConnection.SetupCommand(System.Data.Common.DbCommand)">
            <summary>
            Setups the command.
            </summary>
            <param name="command">Command.</param>
        </member>
        <member name="M:Light.Data.TransactionConnection.Open">
            <summary>
            Open this transaction collection.
            </summary>
        </member>
        <member name="M:Light.Data.TransactionConnection.Commit">
            <summary>
            Commit this transaction collection.
            </summary>
        </member>
        <member name="M:Light.Data.TransactionConnection.Rollback">
            <summary>
            Rollback this transaction collection.
            </summary>
        </member>
        <member name="M:Light.Data.TransactionConnection.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            Async open this transaction collection..
            </summary>
            <returns>The async.</returns>
        </member>
        <member name="M:Light.Data.TransactionConnection.Dispose(System.Boolean)">
            <summary>
            Dispose the specified disposing.
            </summary>
            <param name="disposing">If set to <c>true</c> disposing.</param>
        </member>
        <member name="M:Light.Data.TransactionConnection.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:Light.Data.TransactionConnection"/> object.
            </summary>
        </member>
        <member name="M:Light.Data.TransactionConnection.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Light.Data.TransactionConnection"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:Light.Data.TransactionScope">
            <summary>
            Transaction scope.
            </summary>
        </member>
        <member name="M:Light.Data.TransactionScope.#ctor(Light.Data.DataContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Light.Data.TransactionScope"/> class.
            </summary>
            <param name="context">Context.</param>
            <param name="transguid">Transguid.</param>
        </member>
        <member name="M:Light.Data.TransactionScope.CheckTrans">
            <summary>
            Checks the trans.
            </summary>
            <returns><c>true</c>, if trans was checked, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Light.Data.TransactionScope.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:Light.Data.TransactionScope"/> object.
            </summary>
        </member>
        <member name="M:Light.Data.TransactionScope.Close">
            <summary>
            Close this instance.
            </summary>
        </member>
        <member name="M:Light.Data.TransactionScope.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing">If set to <c>true</c> disposing.</param>
        </member>
        <member name="M:Light.Data.TransactionScope.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Light.Data.TransactionScope"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.LightDataServiceCollectionExtensions">
            <summary>
            Service Extension
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LightDataServiceCollectionExtensions.AddDataContext(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Light.Data.DataContextOptionsBuilder{Light.Data.DataContext}},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Add DataContext Service
            </summary>
            <param name="serviceCollection"></param>
            <param name="optionsAction"></param>
            <param name="contextLifetime"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LightDataServiceCollectionExtensions.AddDataContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Light.Data.DataContextOptionsBuilder{``0}},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Add DataContext Service
            </summary>
            <typeparam name="TContext"></typeparam>
            <param name="serviceCollection"></param>
            <param name="optionsAction"></param>
            <param name="contextLifetime"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LightDataServiceCollectionExtensions.AddDataContext(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Light.Data.DataContextOptionsConfigurator{Light.Data.DataContext}},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Add DataContext Service
            </summary>
            <param name="serviceCollection"></param>
            <param name="config"></param>
            <param name="optionsAction"></param>
            <param name="contextLifetime"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LightDataServiceCollectionExtensions.AddDataContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Light.Data.DataContextOptionsConfigurator{``0}},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Add DataContext Service
            </summary>
            <typeparam name="TContext"></typeparam>
            <param name="serviceCollection"></param>
            <param name="config"></param>
            <param name="optionsAction"></param>
            <param name="contextLifetime"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LightDataServiceCollectionExtensions.AddDataContext(Microsoft.Extensions.DependencyInjection.IServiceCollection,Light.Data.DataContextConfiguration,System.Action{Light.Data.DataContextOptionsConfigurator{Light.Data.DataContext}},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Add DataContext Service
            </summary>
            <param name="serviceCollection"></param>
            <param name="configuration"></param>
            <param name="optionsAction"></param>
            <param name="contextLifetime"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LightDataServiceCollectionExtensions.AddDataContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Light.Data.DataContextConfiguration,System.Action{Light.Data.DataContextOptionsConfigurator{``0}},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Add DataContext Service
            </summary>
            <typeparam name="TContext"></typeparam>
            <param name="serviceCollection"></param>
            <param name="configuration"></param>
            <param name="optionsAction"></param>
            <param name="contextLifetime"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LightDataServiceCollectionExtensions.AddDataContext(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Light.Data.DataContextOptionsConfigurator{Light.Data.DataContext}},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Add DataContext Service
            </summary>
            <param name="serviceCollection"></param>
            <param name="configFilePath"></param>
            <param name="optionsAction"></param>
            <param name="contextLifetime"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LightDataServiceCollectionExtensions.AddDataContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Light.Data.DataContextOptionsConfigurator{``0}},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Add DataContext Service
            </summary>
            <typeparam name="TContext"></typeparam>
            <param name="serviceCollection"></param>
            <param name="configFilePath"></param>
            <param name="optionsAction"></param>
            <param name="contextLifetime"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LightDataServiceCollectionExtensions.AddDataContextFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Light.Data.DataContextOptionsBuilder{Light.Data.DataContext}},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Add DataContext Factory Service
            </summary>
            <param name="serviceCollection"></param>
            <param name="optionsAction"></param>
            <param name="contextLifetime"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LightDataServiceCollectionExtensions.AddDataContextFactory``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Light.Data.DataContextOptionsBuilder{``1}},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Add DataContext Factory Service
            </summary>
            <typeparam name="TContextFactory"></typeparam>
            <typeparam name="TContext"></typeparam>
            <param name="serviceCollection"></param>
            <param name="optionsAction"></param>
            <param name="contextLifetime"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LightDataServiceCollectionExtensions.AddDataContextFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Light.Data.DataContextOptionsConfigurator{Light.Data.DataContext}},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Add DataContext Factory Service
            </summary>
            <param name="serviceCollection"></param>
            <param name="config"></param>
            <param name="optionsAction"></param>
            <param name="contextLifetime"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LightDataServiceCollectionExtensions.AddDataContextFactory``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Light.Data.DataContextOptionsConfigurator{``1}},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Add DataContext Factory Service
            </summary>
            <typeparam name="TContextFactory"></typeparam>
            <typeparam name="TContext"></typeparam>
            <param name="serviceCollection"></param>
            <param name="config"></param>
            <param name="optionsAction"></param>
            <param name="contextLifetime"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LightDataServiceCollectionExtensions.AddDataContextFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,Light.Data.DataContextConfiguration,System.Action{Light.Data.DataContextOptionsConfigurator{Light.Data.DataContext}},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Add DataContext Factory Service
            </summary>
            <param name="serviceCollection"></param>
            <param name="configuration"></param>
            <param name="optionsAction"></param>
            <param name="contextLifetime"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LightDataServiceCollectionExtensions.AddDataContextFactory``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,Light.Data.DataContextConfiguration,System.Action{Light.Data.DataContextOptionsConfigurator{``1}},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Add DataContext Factory Service
            </summary>
            <typeparam name="TContextFactory"></typeparam>
            <typeparam name="TContext"></typeparam>
            <param name="serviceCollection"></param>
            <param name="configuration"></param>
            <param name="optionsAction"></param>
            <param name="contextLifetime"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LightDataServiceCollectionExtensions.AddDataContextFactory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Light.Data.DataContextOptionsConfigurator{Light.Data.DataContext}},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Add DataContext Factory Service
            </summary>
            <param name="serviceCollection"></param>
            <param name="configFilePath"></param>
            <param name="optionsAction"></param>
            <param name="contextLifetime"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.LightDataServiceCollectionExtensions.AddDataContextFactory``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Light.Data.DataContextOptionsConfigurator{``1}},Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Add DataContext Factory Service
            </summary>
            <typeparam name="TContextFactory"></typeparam>
            <typeparam name="TContext"></typeparam>
            <param name="serviceCollection"></param>
            <param name="configFilePath"></param>
            <param name="optionsAction"></param>
            <param name="contextLifetime"></param>
            <returns></returns>
        </member>
    </members>
</doc>
