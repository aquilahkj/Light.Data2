<#@ template debug="true" hostspecific="true" language="C#"  #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core"#>
<#@ assembly name="System.Data"#>
<#@ assembly name="System.Xml"#>
<#@ assembly name="$(SolutionDir)/lib/Npgsql.dll"  #>
<#@ assembly name="$(SolutionDir)/lib/Light.Data.Template.dll"  #>
<#@ import namespace="System"#>
<#@ import namespace="System.Data"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data.SqlClient"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.Text.RegularExpressions"#>
<#@ import namespace="Light.Data.Template"#>
<# 
    //设置命名空间
    var namespaceName = "MyData";
    //设置数据库连接
    var connection = "Server=127.0.0.1;Port=5432;UserId=root;Password=xxxxxx;Database=MyDatabase;Pooling=false;";
    //设置需要生成的数据库
    var dataBase = "MyDatabase";
    //设置是否使用LightData框架
    var useLightData = true;
	DbSetting.Initial();
    //设置需要生成的数据表
    //方法:DbSetting.SetTable(tableName)
    //DbSetting.SetTable("Te_Table");

	//设置需要生成的数据表,并指定别名,,使用别名后字段配置均使用别名指定数据表
	//方法:DbSetting.SetTable(tableName,aliasName)
	//DbSetting.SetTable("Te_Table", "MyBase");

    //设置需要生成的数据表,数据类型继承DataTableEntity
    //方法:DbSetting.SetEntityTable(tableName);
    //DbSetting.SetEntityTable("Te_Table");

	//设置需要生成的数据表,数据类型继承DataTableEntity,并指定别名,使用别名后字段配置均使用别名指定数据表
    //方法:DbSetting.SetEntityTable(tableName,aliasName);
    //DbSetting.SetEntityTable("Te_Table", "MyBase");

	//设置忽略字段,设置"表名.字段名"指定表字段忽略,设置"*.字段名"所有表符合字段名的字段都忽略
	//方法:DbSetting.SetIgnoreField(tableName.field);
	//DbSetting.SetDefaultValue("Te_Table.IgnoreField");
	//DbSetting.SetDefaultValue("*.IgnoreField");
	
	//设置字段别名,设置"表名.字段名"指定表字段使用别名作为字段名,设置"*.字段名"所有表符合字段名的字段使用别名作为字段名,字段别名不作用于其他字段配置
	//方法:DbSetting.SetAliasField(tableName.field,aliasName);
	//DbSetting.SetAliasField("Te_Table.MyColumn","MyField");
	//DbSetting.SetAliasField("*.MyColumn","MyField");

	//设置字段读增改功能控制,设置"表名.字段名"指定表字段读增改功能控制,设置"*.字段名"所有表符合字段名的字段的读增改功能控制
	//方法:只读 DbSetting.SetReadControl(fieldName)
	//DbSetting.SetReadControl("Te_Table.ReadField");
	//DbSetting.SetReadControl("*.ReadField");
	//方法:读增 DbSetting.SetCreateControl(fieldName)
	//DbSetting.SetCreateControl("Te_Table.CreateField");
	//DbSetting.SetCreateControl("*.CreateField");
	//方法:读改 DbSetting.SetUpdateControl(fieldName)
	//DbSetting.SetUpdateControl("Te_Table.UpdateField");
	//DbSetting.SetUpdateControl("*.UpdateField");

    //设置字段的指定类型,设置"表名.字段名"指定表字段自定类型,设置"*.字段名"所有表符合字段名的字段自定类型
    //方法:DbSetting.SetSpecifiedType(tableName.fieldName,typeName);
    //DbSetting.SetSpecifiedType("*.EnumField","MyEnumType");
    //DbSetting.SetSpecifiedType("Table1.EnumField","MyEnumType");

    //设置字段非空,设置"表名.字段名"指定表字段非空,设置"*.字段名"所有表符合字段名的都非空,设置"表名.*"指定表所有字段非空
    //方法:DbSetting.SetNotNullField(tableName.fieldName);
	//DbSetting.SetNotNullField("Te_Table.NullField");
    //DbSetting.SetNotNullField("*.NullField");
	//DbSetting.SetNotNullField("Te_Table.*");

    //设置字段默认值,设置"表名.字段名"指定表字段使用默认值,设置"*.字段名"所有表符合字段名的都使用默认值
    //方法:DbSetting.SetDefaultValue(tableName.fieldName,defaultValue);
    //DbSetting.SetDefaultValue("Te_Table.NowField","DefaultTime.Now");
    //DbSetting.SetDefaultValue("Te_Table.BoolField","true");
    //DbSetting.SetDefaultValue("Te_Table.IntField","20");
    //DbSetting.SetDefaultValue("Te_Table.DecimalField","20.5");
    //DbSetting.SetDefaultValue("Te_Table.DateTimeField","2017-01-02 12:00:00");
	//DbSetting.SetDefaultValue("Te_Table.StringField","mytestmytest");
    //DbSetting.SetDefaultValue("Te_Table.EnumField","MyEnumType.Positive1");
	//DbSetting.SetDefaultValue("*.TimeStampField","DefaultTime.TimeStamp");


    var dbSchema = new PostgreSchema(dataBase, connection);
    var tableList = dbSchema.GetTables();
#>
{
	"lightDataMapper": {
		"dataTypes": [
<#
	int j=0;
    foreach(Table table in tableList)
    {
		j++;
		string tableName=table.TableName;
#>
			{
				"type": "<#=namespaceName#>.<#=StringUtil.ToPascalCase(tableName)#>,<#=namespaceName#>",
				"tableName": "<#=table.RawName#>",
				"isEntityTable": true,
				"dataFields": [
<#
		int i=0;
		var columns=table.GetColumns();
        foreach(Column c in columns)
        {
			i++;
#>
					{
						"fieldName": "<#=StringUtil.ToPascalCase(c.FieldName)#>",
<# if (c.AllowNull) { #>
						"isNullable": true,
<# } #>
<# if (c.IsPrimaryKey) { #>
						"isPrimaryKey": true, 
<# } #>
<# if (c.IsIdentity) { #>
						"isIdentity": true, 
<# } #>
<# if (c.DBType!=null) { #>
						"dbType": "<#=c.DBType#>",
<# } #>
<# if (c.DefaultValue!=null) { #>
						"defaultValue": <#=c.DefaultValue#>,
<# } #>
<# if (c.Control!=null) { #>
						"functionControl": "<#=c.Control#>",
<# } #>
						"name": "<#=c.ColumnName#>"
					}<# if (i<columns.Length) { #>,
<# } #>
<#
        }
#>

				]
			}<# if (j<tableList.Count) { #>,
<# } #>
<#
    }
#>

		]
	}
}