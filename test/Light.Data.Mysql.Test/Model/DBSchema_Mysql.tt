<#@ template debug="true" hostspecific="true" language="C#"  #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core"#>
<#@ assembly name="System.Data"#>
<#@ assembly name="System.Xml"#>
<#@ assembly name="MySql.Data"  #>
<#@ import namespace="System"#>
<#@ import namespace="System.Data"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="MySql.Data.MySqlClient"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.Text.RegularExpressions"#>
<# 
    //设置命名空间
    var namespaceName = "Light.Data.Mysql.Test";
    //设置数据库连接
    var connection = "server=192.168.210.1;Port=3306;User Id=root;password=qwerty;Allow Zero Datetime=True;charset=utf8;";
    //设置需要生成的数据库
    var dataBase = "LightData_Test";
    //设置是否使用LightData框架
    var useLightData = true;

    //设置需要生成的数据表
    DbSetting.SetTable("Te_BaseField");
    DbSetting.SetTable("Te_BaseFieldNoIdentity");
    DbSetting.SetTable("Te_BaseFieldExpression");
    DbSetting.SetTable("Te_BaseFieldExpression_Extend");
    DbSetting.SetTable("Te_BaseFieldSelectField");
    DbSetting.SetTable("Te_BaseFieldAggregateField");
    DbSetting.SetTable("Te_BaseField_SelectInsert");
    DbSetting.SetTable("Te_BaseField_SelectInsert_NoIdentity");
    DbSetting.SetTable("Te_BaseField_NullMiniValue");
    DbSetting.SetTable("Te_BaseField_DefaultValue");
    DbSetting.SetTable("Te_BaseField_Alias");
    DbSetting.SetTable("Te_MainTable");
    DbSetting.SetTable("Te_SubTable");
    DbSetting.SetTable("Te_JoinTable_SelectInsert");
    DbSetting.SetTable("Te_RelateA");
    DbSetting.SetTable("Te_RelateB");
    DbSetting.SetTable("Te_RelateC");
    DbSetting.SetTable("Te_RelateD");
    DbSetting.SetTable("Te_RelateE");
    DbSetting.SetTable("Te_RelateF");
    DbSetting.SetTable("Te_RelateCollection");
    DbSetting.SetTable("Te_BaseFieldAggregateField_GroupBy");
    DbSetting.SetTable("Te_ObjectField");
    //DbSetting.SetTable("Te_BaseField_Config_Replace");

    //设置需要生成的数据表,数据类型继承DataTableEntity
    DbSetting.SetEntityTable("Te_BaseField_Entity");
    DbSetting.SetEntityTable("Te_BaseFieldNoIdentity_Entity");

    //设置字段的转换类型,设置"表名.字段名"指定表字段转换,设置"*.字段名"所有表符合字段名的都转换
    DbSetting.SetSpecifiedType("*.EnumInt32Field", "EnumInt32Type");
    DbSetting.SetSpecifiedType("*.EnumInt32FieldNull", "EnumInt32Type");
    DbSetting.SetSpecifiedType("*.EnumInt64Field", "EnumInt64Type");
    DbSetting.SetSpecifiedType("*.EnumInt64FieldNull", "EnumInt64Type");

    DbSetting.SetSpecifiedType("*.ByteField", "byte");
    DbSetting.SetSpecifiedType("*.ByteFieldNull", "byte");
    DbSetting.SetSpecifiedType("*.SbyteField", "sbyte");
    DbSetting.SetSpecifiedType("*.SbyteFieldNull", "sbyte");

    DbSetting.SetSpecifiedType("*.ObjectField", "ObjectType");
    DbSetting.SetSpecifiedType("*.ObjectFieldNull", "ObjectType");
    //设置字段非空,设置"表名.字段名"指定表字段非空,设置"*.字段名"所有表符合字段名的都非空,设置"表名.*"指定表所有字段非空
    DbSetting.SetNotNullField("Te_BaseField_NullMiniValue.*");

    //设置字段默认值,设置"表名.字段名"指定表字段使用默认值,设置"*.字段名"所有表符合字段名的都使用默认值
    DbSetting.SetDefaultValue("*.NowFieldNull", "DefaultTime.Now");
    DbSetting.SetDefaultValue("*.TodayFieldNull", "DefaultTime.Today");
    DbSetting.SetDefaultValue("*.NowField", "DefaultTime.Now");
    DbSetting.SetDefaultValue("*.TodayField", "DefaultTime.Today");
    DbSetting.SetDefaultValue("Te_BaseField_DefaultValue.BoolFieldNull", "true");
    DbSetting.SetDefaultValue("Te_BaseField_DefaultValue.SbyteFieldNull", "20");
    DbSetting.SetDefaultValue("Te_BaseField_DefaultValue.ByteFieldNull", "20");
    DbSetting.SetDefaultValue("Te_BaseField_DefaultValue.Int16FieldNull", "20");
    DbSetting.SetDefaultValue("Te_BaseField_DefaultValue.Int32FieldNull", "20");
    DbSetting.SetDefaultValue("Te_BaseField_DefaultValue.Int64FieldNull", "20");
    DbSetting.SetDefaultValue("Te_BaseField_DefaultValue.UInt16FieldNull", "20");
    DbSetting.SetDefaultValue("Te_BaseField_DefaultValue.UInt32FieldNull", "20");
    DbSetting.SetDefaultValue("Te_BaseField_DefaultValue.UInt64FieldNull", "20");
    DbSetting.SetDefaultValue("Te_BaseField_DefaultValue.FloatFieldNull", "20.5");
    DbSetting.SetDefaultValue("Te_BaseField_DefaultValue.DoubleFieldNull", "20.5");
    DbSetting.SetDefaultValue("Te_BaseField_DefaultValue.DecimalFieldNull", "20.5");
    DbSetting.SetDefaultValue("Te_BaseField_DefaultValue.DateTimeField", "2017-01-02 12:00:00");
    DbSetting.SetDefaultValue("Te_BaseField_DefaultValue.DateTimeFieldNull", "2017-01-02 12:00:00");
    DbSetting.SetDefaultValue("Te_BaseField_DefaultValue.VarcharFieldNull", "testtest");
    DbSetting.SetDefaultValue("Te_BaseField_DefaultValue.TextFieldNull", "testtest");
    DbSetting.SetDefaultValue("Te_BaseField_DefaultValue.EnumInt32FieldNull", "EnumInt32Type.Positive1");
    DbSetting.SetDefaultValue("Te_BaseField_DefaultValue.EnumInt64FieldNull", "EnumInt64Type.Positive1");

    DbSetting.SetDefaultValue("Te_BaseField_NullMiniValue.DateTimeFieldNull", "2017-01-02 12:00:00");
    var dbSchema = new DataBaseSchema(dataBase, connection);
    var tableList = dbSchema.GetTables();
#>
using System;
using System.Collections.Generic;
using System.Text;
<# if(useLightData || DbSetting.HasEntityTable){ #>
using Light.Data;
<# } #>

namespace <#=namespaceName#>
{
<#
    foreach(Table table in tableList)
    {
        string tableName=table.TableName;
#>
	/// <summary>
    /// <#=table.CommentText#>
    /// </summary>
<# if(useLightData){ #>
    [DataTable("<#=tableName#>")]
<# } #>
    public class <#=StringUtil.ToPascalCase(tableName)#> <#=DbSetting.CheckEntity(tableName)?": DataTableEntity":""#>
    {
        #region "Data Property"
<#
        foreach(Column c in table.Columns.Values)
        {
#>
<# if(DbSetting.CheckEntity(tableName)){ #>
        private <#=c.DataType#> <#=StringUtil.ToCamelCase(c.ColumnName)#>;

		/// <summary>
		/// <#=c.ColumnComment#>
		/// </summary>
		/// <value></value>
<# if(useLightData){ #>
		[DataField("<#=c.ColumnName#>"<# if (c.IsIdentity) { #>, IsIdentity = true<# } #><# if (c.IsPrimaryKey) { #>, IsPrimaryKey = true<# } #><# if (c.AllowNull) { #>, IsNullable = true<# } #><# if (c.DBType!=null) { #>, DBType = "<#=c.DBType#>"<# } #><# if (c.DefaultValue!=null) { #>, DefaultValue = <#=c.DefaultValue#><# } #>)]
<# } #>
        public <#=c.DataType#> <#=StringUtil.ToPascalCase(c.ColumnName)#>
        {
            get { 
            	return this.<#=StringUtil.ToCamelCase(c.ColumnName)#>; 
            }
            set { 
            	this.<#=StringUtil.ToCamelCase(c.ColumnName)#> = value; 
				base.UpdateDataNotify(nameof(<#=StringUtil.ToPascalCase(c.ColumnName)#>));
            }
        }

<# } else { #>
        /// <summary>
        /// <#=c.ColumnComment#>
        /// </summary>
        /// <value></value>
<# if(useLightData){ #>
        [DataField("<#=c.ColumnName#>"<# if (c.IsIdentity) { #>, IsIdentity = true<# } #><# if (c.IsPrimaryKey) { #>, IsPrimaryKey = true<# } #><# if (c.AllowNull) { #>, IsNullable = true<# } #><# if (c.DBType!=null) { #>, DBType = "<#=c.DBType#>"<# } #><# if (c.DefaultValue!=null) { #>, DefaultValue = <#=c.DefaultValue#><# } #>)]
<# } #>
	    public <#=c.DataType#> <#=StringUtil.ToPascalCase(c.ColumnName)#>
        {
            get;
            set;
        }
<# } #>
<#
        }
#>
        #endregion
    }

<#
    }
#>
}

<#+ 

        #region GetDataBaseSchema

    public class DataBaseSchema
    {
        string _dataBaseName;

        Dictionary<string, Table> _dict = null;

        string _connectionString;

        public DataBaseSchema(string dataBaseName, string connectionString)
        {
            this._dataBaseName = dataBaseName;
            this._connectionString = connectionString;
            //this._conn = new SqlConnection(connectionString);
            this._dict = new Dictionary<string, Table>();
        }

        public List<Table> GetTables()
        {
            string tableCommandText = @"select TABLE_NAME as TableName,TABLE_COMMENT as CommentText from information_schema.TABLES where TABLE_SCHEMA='{0}' and TABLE_NAME='{1}'";

            string columnCommandText = @"
select 
ORDINAL_POSITION as 'ColumnId',
case when COLUMN_KEY='PRI' then 1 else 0 end as 'ColumnKey',
CHARACTER_MAXIMUM_LENGTH AS 'MaxLength',
COLUMN_NAME AS 'ColumnName',
DATA_TYPE AS 'DataType',
case when EXTRA='auto_increment' then 1 else 0 end as 'IsIdentity',
case when IS_NULLABLE='YES' then 1 else 0 end as 'AllowNull',
NUMERIC_PRECISION as 'Precision',
NUMERIC_SCALE as 'Scale',
COLUMN_COMMENT as 'ColumnComment',
COLUMN_TYPE AS 'ColumnType'
from information_schema.COLUMNS where TABLE_SCHEMA='{0}' and TABLE_NAME='{1}'
order by ORDINAL_POSITION";
            List<Table> tables = new List<Table>();
            foreach (string tableName in DbSetting.GetTables()) {
                string tableCommandStr = String.Format(tableCommandText, this._dataBaseName, tableName);
                MySqlConnection tableConn = new MySqlConnection(_connectionString);
                tableConn.Open();
                MySqlCommand tableCommand = new MySqlCommand(tableCommandStr, tableConn);
                MySqlDataAdapter tableAd = new MySqlDataAdapter(tableCommand);
                DataSet tableDs = new DataSet();
                tableAd.Fill(tableDs);
                DataTable tableColumns = tableDs.Tables[0];
                tableConn.Close();
                if (tableColumns.Rows.Count == 0) {
                    continue;
                }
                string tableComment = Convert.ToString(tableColumns.Rows[0]["CommentText"]);
                string columnCommandStr = String.Format(columnCommandText, this._dataBaseName, tableName);
                MySqlConnection columnConn = new MySqlConnection(_connectionString);
                columnConn.Open();
                MySqlCommand columnCommand = new MySqlCommand(columnCommandStr, tableConn);
                MySqlDataAdapter columnAd = new MySqlDataAdapter(columnCommand);
                DataSet columnDs = new DataSet();
                columnAd.Fill(columnDs);
                DataTable columnColumns = columnDs.Tables[0];
                tableConn.Close();

                Table table = new Table(_dataBaseName, tableName);
                if (String.IsNullOrEmpty(tableComment)) {
                    tableComment = tableName;
                }
                table.CommentText = tableComment;
                foreach (DataRow item in columnColumns.Rows) {
                    table.SetColumn(item);
                }
                tables.Add(table);
            }
            return tables;
        }
    }

    public class Table
    {
        public Table(string dataBaseName, string tableName)
        {
            this._dataBaseName = dataBaseName;
            this._tableName = tableName;
            this._columns = new Dictionary<string, Column>();
        }

        string _dataBaseName = null;
        public string DataBaseName {
            get {
                return this._dataBaseName;
            }
        }
        string _commentText = null;
        public string CommentText {
            set {
                this._commentText = value;
            }
            get {
                return this._commentText;
            }
        }


        string _tableName = null;
        public string TableName {
            get {
                return this._tableName;
            }
        }

        Dictionary<string, Column> _columns = null;
        public Dictionary<string, Column> Columns {
            get {
                return this._columns;
            }
        }

        public void SetColumn(DataRow dataRow)
        {
            string columnName = dataRow["ColumnName"].ToString();
            Column column = null;
            if (!this._columns.TryGetValue(columnName, out column)) {
                column = new Column(this, dataRow);
            }
            this._columns[columnName] = column;
        }

        public bool GetColumn(string columnName, out Column column)
        {
            column = null;
            Dictionary<string, Column> dict = this._columns;
            if (dict != null) {
                return dict.TryGetValue(columnName, out column);
            }
            return false;
        }
    }

    public class Column
    {
        public Column(Table table, DataRow dataRow)
        {
            this._table = table;
            this._dataBaseName = table.DataBaseName;
            this._tableName = table.TableName;

            this._allowNull = Convert.ToBoolean(dataRow["AllowNull"]);


            this._columnName = dataRow["ColumnName"].ToString();
            this._lowerColumnName = string.Format("{0}{1}", this._columnName[0].ToString().ToLower(), this._columnName.Substring(1));
            this._upColumnName = string.Format("{0}{1}", this._columnName[0].ToString().ToUpper(), this._columnName.Substring(1));
            this._columnComment = dataRow["ColumnComment"].ToString();
            string columnType = dataRow["ColumnType"].ToString();
            string dataType = dataRow["DataType"].ToString();
            this._rawType = dataType;
            if (dataType.Equals("bit", StringComparison.InvariantCultureIgnoreCase)) {
                this._dataType = "bool";
            }
            else if (dataType.Equals("datetime", StringComparison.InvariantCultureIgnoreCase)
                || dataType.Equals("timestamp", StringComparison.InvariantCultureIgnoreCase)
                || dataType.Equals("date", StringComparison.InvariantCultureIgnoreCase)
                ) {
                this._dataType = "DateTime";
            }
            else if (dataType.Equals("decimal", StringComparison.InvariantCultureIgnoreCase)
                || dataType.Equals("money", StringComparison.InvariantCultureIgnoreCase)) {
                this._dataType = "decimal";
            }
            else if (dataType.Equals("double", StringComparison.InvariantCultureIgnoreCase)) {
                this._dataType = "double";
            }
            else if (dataType.Equals("float", StringComparison.InvariantCultureIgnoreCase)) {
                this._dataType = "float";
            }
            else if (dataType.Equals("char", StringComparison.InvariantCultureIgnoreCase)
                || dataType.Equals("varchar", StringComparison.InvariantCultureIgnoreCase)
                || dataType.Equals("text", StringComparison.InvariantCultureIgnoreCase)
                || dataType.Equals("tinytext", StringComparison.InvariantCultureIgnoreCase)
                || dataType.Equals("mediumtext", StringComparison.InvariantCultureIgnoreCase)
                || dataType.Equals("longtext", StringComparison.InvariantCultureIgnoreCase)
                ) {
                this._dataType = "string";
            }
            else if (dataType.Equals("smallint", StringComparison.InvariantCultureIgnoreCase)) {
                this._dataType = "short";
            }
            else if (dataType.Equals("tinyint", StringComparison.InvariantCultureIgnoreCase)) {
                this._dataType = "sbyte";
            }
            else if (dataType.Equals("mediumint", StringComparison.InvariantCultureIgnoreCase)
                || dataType.Equals("int", StringComparison.InvariantCultureIgnoreCase)
                ) {
                this._dataType = "int";
            }
            else if (dataType.Equals("bigint", StringComparison.InvariantCultureIgnoreCase)) {
                this._dataType = "long";
            }
            else {
                this._dataType = "byte[]";
            }
			string tmpType=this._dataType;
            if (string.IsNullOrEmpty(this._columnComment)) {
                this._columnComment = this._columnName;
            }

            string specifiedName;
            if (DbSetting.GetSpecifiedType(this._tableName + "." + this._columnName, out specifiedName)) {
                this._dataType = specifiedName;
            }
            else if (DbSetting.GetSpecifiedType("*." + this._columnName, out specifiedName)) {
                this._dataType = specifiedName;
            }
            else if (columnType.Contains("unsigned")) {
                if (this._dataType == "int" || this._dataType == "short" || this._dataType == "long") {
                    this._dataType = string.Format("u{0}", this._dataType);
                }
                else if (this._dataType == "sbyte") {
                    this._dataType = "byte";
                }
            }

			if (this._allowNull && !string.Equals(tmpType, "string", StringComparison.InvariantCultureIgnoreCase)&& !string.Equals(tmpType, "byte[]", StringComparison.InvariantCultureIgnoreCase))
            {
                this._dataType = string.Format("{0}?", this._dataType);
            }

            string defaultValue;
            if (DbSetting.GetDefaultValue(this._tableName + "." + this._columnName, out defaultValue) || DbSetting.GetDefaultValue("*." + this._columnName, out defaultValue)) {
                if (DbSetting.GetDefaultValueStringMode()) {
                    this._defaultValue = "\"" + defaultValue + "\"";
                }
                else if (this._dataType == "string") {
                    this._defaultValue = "\"" + defaultValue + "\"";
                }
                else if (this._dataType == "DateTime" || this._dataType == "DateTime?") {
                    if (defaultValue == "DefaultTime.Now" || defaultValue == "DefaultTime.Today") {
                        this._defaultValue = defaultValue;
                    }
                    else {
                        this._defaultValue = "\"" + defaultValue + "\"";
                    }
                }
                else {
                    this._defaultValue = defaultValue;
                }
            }

            this._isPrimaryKey = Convert.ToBoolean(dataRow["ColumnKey"]);
            this._isIdentity = Convert.ToBoolean(dataRow["IsIdentity"]);

            int maxLength = 0;
            if (int.TryParse(dataRow["MaxLength"].ToString(), out maxLength)) {
                this._maxLength = maxLength;
            }

            if (this._allowNull) {
                if (DbSetting.CheckNotNullField(this._tableName + "." + this._columnName) || DbSetting.CheckNotNullField(this._tableName + ".*") || DbSetting.CheckNotNullField("*." + this._columnName)) {
                    this._allowNull = false;
                }
            }
        }

        string _dataBaseName = null;
        public string DataBaseName {
            get {
                return this._dataBaseName;
            }
        }

        Table _table = null;
        public Table Table {
            get {
                return this._table;
            }
        }

        string _tableName = null;
        public string TableName {
            get {
                return this._tableName;
            }
        }

        string _columnName = null;
        public string ColumnName {
            get {
                return this._columnName;
            }
        }

        string _columnComment = null;
        public string ColumnComment {
            get {
                return this._columnComment;
            }
        }

        public string _defaultValue = null;
        public string DefaultValue {
            get {
                return this._defaultValue;
            }
        }

        bool _allowNull = false;
        public bool AllowNull {
            get {
                return this._allowNull;
            }
        }

        string _rawType = null;
        public string RawType {
            get {
                return this._rawType;
            }
        }

        string _dataType = null;
        public string DataType {
            get {
                return this._dataType;
            }
        }

        string _dbType = null;
        public string DBType {
            get {
                return this._dbType;
            }
        }

        int? _maxLength = null;
        public int? MaxLength {
            get {
                return this._maxLength;
            }
        }

        bool _isPrimaryKey = false;
        public bool IsPrimaryKey {
            get {
                return this._isPrimaryKey;
            }
        }

        bool _isIdentity = false;
        public bool IsIdentity {
            get {
                return this._isIdentity;
            }
        }

        string _upColumnName = null;
        public string UpColumnName {
            get {
                return this._upColumnName;
            }
        }

        string _lowerColumnName = null;
        public string LowerColumnName {
            get {
                return this._lowerColumnName;
            }
        }
    }

    #endregion

    public static class DbSetting
    {
        static bool defaultValueStringMode = false;
        static Dictionary<string, string> specifiedDict = new Dictionary<string, string>();
        static Dictionary<string, string> defaultValueDict = new Dictionary<string, string>();
        static HashSet<string> tableHash = new HashSet<string>();
        static HashSet<string> notnullFieldHash = new HashSet<string>();
        static HashSet<string> entityHash = new HashSet<string>();

        public static void SetSpecifiedType(string filedName, string specifiedType)
        {
            specifiedDict[filedName] = specifiedType;
        }

        public static bool GetSpecifiedType(string fieldName, out string specifiedType)
        {
            return specifiedDict.TryGetValue(fieldName, out specifiedType);
        }

        public static void SetDefaultValue(string filedName, string value)
        {
            defaultValueDict[filedName] = value;
        }

        public static bool GetDefaultValue(string fieldName, out string value)
        {
            return defaultValueDict.TryGetValue(fieldName, out value);
        }


        public static void SetTable(string table)
        {
            tableHash.Add(table);
        }

        public static bool CheckTable(string table)
        {
            if (tableHash.Count > 0) {
                return tableHash.Contains(table);
            }
            else {
                return true;
            }
        }

        public static string[] GetTables()
        {
            return tableHash.ToArray();
        }

        public static void SetNotNullField(string field)
        {
            notnullFieldHash.Add(field);
        }

        public static bool CheckNotNullField(string field)
        {
            return notnullFieldHash.Contains(field);
        }

        public static void SetEntityTable(string table)
        {
            tableHash.Add(table);
            entityHash.Add(table);
        }

        public static bool CheckEntity(string table)
        {
            return entityHash.Contains(table);
        }

		public static bool HasEntityTable
		{
			get
			{
				return entityHash.Count>0;
			}
		}

        public static bool GetDefaultValueStringMode()
        {
            return defaultValueStringMode;
        }

        public static void SetDefaultValueStringMode(bool mode)
        {
            defaultValueStringMode = mode;
        }
    }

    public static class StringUtil
    {
        public static string ToPascalCase(string name)
        {
            StringBuilder sb = new StringBuilder();
            string[] parts = name.Split(new char[] { '_',' ' }, StringSplitOptions.RemoveEmptyEntries);
            foreach (string part in parts) {
                if (part.Length > 0) {
                    sb.Append(Char.ToUpper(part[0]));
                    if (part.Length > 1) {
                        string o = part.Substring(1);
                        if (o == o.ToUpper()) {
                            o = o.ToLower();
                        }
                        sb.Append(o);
                    }
                }
            }
            return sb.ToString();
        }


        public static string ToCamelCase(string name)
        {
            StringBuilder sb = new StringBuilder();
            string[] parts = name.Split(new char[] { '_',' ' }, StringSplitOptions.RemoveEmptyEntries);
            bool f = false;
            foreach (string part in parts) {
                if (part.Length > 0) {
                    if (!f) {
                        sb.Append(Char.ToLower(part[0]));
                        f = true;
                    }
                    else {
                        sb.Append(Char.ToUpper(part[0]));
                    }

                    if (part.Length > 1) {
                        string o = part.Substring(1);
                        if (o == o.ToUpper()) {
                            o = o.ToLower();
                        }
                        sb.Append(o);
                    }
                }
            }
            return sb.ToString();
        }
    }
#>